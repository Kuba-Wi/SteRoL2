
srlab02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a14  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  08003b9c  08003b9c  00013b9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be4  08003be4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003be4  08003be4  00013be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003bec  08003bec  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003bec  08003bec  00013bec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003bf4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000013c  2000000c  08003c00  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000148  08003c00  00020148  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e4e9  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d02  00000000  00000000  0002e525  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009c0  00000000  00000000  00030228  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000918  00000000  00000000  00030be8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025f7d  00000000  00000000  00031500  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bc81  00000000  00000000  0005747d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e9d15  00000000  00000000  000630fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0014ce13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000026d8  00000000  00000000  0014ce68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003b84 	.word	0x08003b84

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003b84 	.word	0x08003b84

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <foo>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint32_t lsb = 0;
uint32_t msb = 0;

void foo(void) {
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
//	int local_variable;
	++lsb;
 80004c4:	4b0a      	ldr	r3, [pc, #40]	; (80004f0 <foo+0x30>)
 80004c6:	681b      	ldr	r3, [r3, #0]
 80004c8:	3301      	adds	r3, #1
 80004ca:	4a09      	ldr	r2, [pc, #36]	; (80004f0 <foo+0x30>)
 80004cc:	6013      	str	r3, [r2, #0]
	if (lsb > 4) {
 80004ce:	4b08      	ldr	r3, [pc, #32]	; (80004f0 <foo+0x30>)
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	2b04      	cmp	r3, #4
 80004d4:	d902      	bls.n	80004dc <foo+0x1c>
		lsb = 0;
 80004d6:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <foo+0x30>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
	}
	++msb;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <foo+0x34>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	3301      	adds	r3, #1
 80004e2:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <foo+0x34>)
 80004e4:	6013      	str	r3, [r2, #0]
}
 80004e6:	bf00      	nop
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	20000028 	.word	0x20000028
 80004f4:	2000002c 	.word	0x2000002c

080004f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004f8:	b580      	push	{r7, lr}
 80004fa:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004fc:	f000 fa67 	bl	80009ce <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000500:	f000 f812 	bl	8000528 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000504:	f000 f8b8 	bl	8000678 <MX_GPIO_Init>
  MX_DMA_Init();
 8000508:	f000 f890 	bl	800062c <MX_DMA_Init>
  MX_USART2_UART_Init();
 800050c:	f000 f85e 	bl	80005cc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000510:	2120      	movs	r1, #32
 8000512:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000516:	f000 ffad 	bl	8001474 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800051a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800051e:	f000 facb 	bl	8000ab8 <HAL_Delay>
	  foo();
 8000522:	f7ff ffcd 	bl	80004c0 <foo>
	  HAL_GPIO_TogglePin(LD2_GPIO_Port, LD2_Pin);
 8000526:	e7f3      	b.n	8000510 <main+0x18>

08000528 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b096      	sub	sp, #88	; 0x58
 800052c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800052e:	f107 0314 	add.w	r3, r7, #20
 8000532:	2244      	movs	r2, #68	; 0x44
 8000534:	2100      	movs	r1, #0
 8000536:	4618      	mov	r0, r3
 8000538:	f003 fb1c 	bl	8003b74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800053c:	463b      	mov	r3, r7
 800053e:	2200      	movs	r2, #0
 8000540:	601a      	str	r2, [r3, #0]
 8000542:	605a      	str	r2, [r3, #4]
 8000544:	609a      	str	r2, [r3, #8]
 8000546:	60da      	str	r2, [r3, #12]
 8000548:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800054a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800054e:	f000 ffb9 	bl	80014c4 <HAL_PWREx_ControlVoltageScaling>
 8000552:	4603      	mov	r3, r0
 8000554:	2b00      	cmp	r3, #0
 8000556:	d001      	beq.n	800055c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000558:	f000 f8cc 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800055c:	2310      	movs	r3, #16
 800055e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8000578:	2328      	movs	r3, #40	; 0x28
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 ffef 	bl	8001570 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x74>
  {
    Error_Handler();
 8000598:	f000 f8ac 	bl	80006f4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2104      	movs	r1, #4
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 fbc1 	bl	8001d3c <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80005c0:	f000 f898 	bl	80006f4 <Error_Handler>
  }
}
 80005c4:	bf00      	nop
 80005c6:	3758      	adds	r7, #88	; 0x58
 80005c8:	46bd      	mov	sp, r7
 80005ca:	bd80      	pop	{r7, pc}

080005cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_USART2_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005d8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART2_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART2_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <MX_USART2_UART_Init+0x58>)
 8000610:	f002 fa56 	bl	8002ac0 <HAL_UART_Init>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 f86b 	bl	80006f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800061e:	bf00      	nop
 8000620:	bd80      	pop	{r7, pc}
 8000622:	bf00      	nop
 8000624:	200000c0 	.word	0x200000c0
 8000628:	40004400 	.word	0x40004400

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b10      	ldr	r3, [pc, #64]	; (8000674 <MX_DMA_Init+0x48>)
 8000634:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000636:	4a0f      	ldr	r2, [pc, #60]	; (8000674 <MX_DMA_Init+0x48>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6493      	str	r3, [r2, #72]	; 0x48
 800063e:	4b0d      	ldr	r3, [pc, #52]	; (8000674 <MX_DMA_Init+0x48>)
 8000640:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	2010      	movs	r0, #16
 8000650:	f000 fb31 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000654:	2010      	movs	r0, #16
 8000656:	f000 fb4a 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800065a:	2200      	movs	r2, #0
 800065c:	2100      	movs	r1, #0
 800065e:	2011      	movs	r0, #17
 8000660:	f000 fb29 	bl	8000cb6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000664:	2011      	movs	r0, #17
 8000666:	f000 fb42 	bl	8000cee <HAL_NVIC_EnableIRQ>

}
 800066a:	bf00      	nop
 800066c:	3708      	adds	r7, #8
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40021000 	.word	0x40021000

08000678 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b088      	sub	sp, #32
 800067c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067e:	f107 030c 	add.w	r3, r7, #12
 8000682:	2200      	movs	r2, #0
 8000684:	601a      	str	r2, [r3, #0]
 8000686:	605a      	str	r2, [r3, #4]
 8000688:	609a      	str	r2, [r3, #8]
 800068a:	60da      	str	r2, [r3, #12]
 800068c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068e:	4b18      	ldr	r3, [pc, #96]	; (80006f0 <MX_GPIO_Init+0x78>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_GPIO_Init+0x78>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	64d3      	str	r3, [r2, #76]	; 0x4c
 800069a:	4b15      	ldr	r3, [pc, #84]	; (80006f0 <MX_GPIO_Init+0x78>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	4a11      	ldr	r2, [pc, #68]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006ac:	f043 0302 	orr.w	r3, r3, #2
 80006b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006b2:	4b0f      	ldr	r3, [pc, #60]	; (80006f0 <MX_GPIO_Init+0x78>)
 80006b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006b6:	f003 0302 	and.w	r3, r3, #2
 80006ba:	607b      	str	r3, [r7, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80006be:	2200      	movs	r2, #0
 80006c0:	2120      	movs	r1, #32
 80006c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006c6:	f000 febd 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80006ca:	2320      	movs	r3, #32
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006ce:	2301      	movs	r3, #1
 80006d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d2:	2300      	movs	r3, #0
 80006d4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006d6:	2300      	movs	r3, #0
 80006d8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80006da:	f107 030c 	add.w	r3, r7, #12
 80006de:	4619      	mov	r1, r3
 80006e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e4:	f000 fd04 	bl	80010f0 <HAL_GPIO_Init>

}
 80006e8:	bf00      	nop
 80006ea:	3720      	adds	r7, #32
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}
 80006f0:	40021000 	.word	0x40021000

080006f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f8:	b672      	cpsid	i
}
 80006fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006fc:	e7fe      	b.n	80006fc <Error_Handler+0x8>
	...

08000700 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000700:	b480      	push	{r7}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000706:	4b0f      	ldr	r3, [pc, #60]	; (8000744 <HAL_MspInit+0x44>)
 8000708:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800070a:	4a0e      	ldr	r2, [pc, #56]	; (8000744 <HAL_MspInit+0x44>)
 800070c:	f043 0301 	orr.w	r3, r3, #1
 8000710:	6613      	str	r3, [r2, #96]	; 0x60
 8000712:	4b0c      	ldr	r3, [pc, #48]	; (8000744 <HAL_MspInit+0x44>)
 8000714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000716:	f003 0301 	and.w	r3, r3, #1
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	4b09      	ldr	r3, [pc, #36]	; (8000744 <HAL_MspInit+0x44>)
 8000720:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000722:	4a08      	ldr	r2, [pc, #32]	; (8000744 <HAL_MspInit+0x44>)
 8000724:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000728:	6593      	str	r3, [r2, #88]	; 0x58
 800072a:	4b06      	ldr	r3, [pc, #24]	; (8000744 <HAL_MspInit+0x44>)
 800072c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000732:	603b      	str	r3, [r7, #0]
 8000734:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000736:	bf00      	nop
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
 8000742:	bf00      	nop
 8000744:	40021000 	.word	0x40021000

08000748 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b0ac      	sub	sp, #176	; 0xb0
 800074c:	af00      	add	r7, sp, #0
 800074e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000750:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8000754:	2200      	movs	r2, #0
 8000756:	601a      	str	r2, [r3, #0]
 8000758:	605a      	str	r2, [r3, #4]
 800075a:	609a      	str	r2, [r3, #8]
 800075c:	60da      	str	r2, [r3, #12]
 800075e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000760:	f107 0314 	add.w	r3, r7, #20
 8000764:	2288      	movs	r2, #136	; 0x88
 8000766:	2100      	movs	r1, #0
 8000768:	4618      	mov	r0, r3
 800076a:	f003 fa03 	bl	8003b74 <memset>
  if(huart->Instance==USART2)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	681b      	ldr	r3, [r3, #0]
 8000772:	4a4f      	ldr	r2, [pc, #316]	; (80008b0 <HAL_UART_MspInit+0x168>)
 8000774:	4293      	cmp	r3, r2
 8000776:	f040 8096 	bne.w	80008a6 <HAL_UART_MspInit+0x15e>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 800077a:	2302      	movs	r3, #2
 800077c:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800077e:	2300      	movs	r3, #0
 8000780:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000782:	f107 0314 	add.w	r3, r7, #20
 8000786:	4618      	mov	r0, r3
 8000788:	f001 fcde 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000792:	f7ff ffaf 	bl	80006f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000796:	4b47      	ldr	r3, [pc, #284]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 8000798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800079a:	4a46      	ldr	r2, [pc, #280]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 800079c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007a0:	6593      	str	r3, [r2, #88]	; 0x58
 80007a2:	4b44      	ldr	r3, [pc, #272]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 80007a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007aa:	613b      	str	r3, [r7, #16]
 80007ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007ae:	4b41      	ldr	r3, [pc, #260]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 80007b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b2:	4a40      	ldr	r2, [pc, #256]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 80007b4:	f043 0301 	orr.w	r3, r3, #1
 80007b8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ba:	4b3e      	ldr	r3, [pc, #248]	; (80008b4 <HAL_UART_MspInit+0x16c>)
 80007bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007be:	f003 0301 	and.w	r3, r3, #1
 80007c2:	60fb      	str	r3, [r7, #12]
 80007c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007c6:	230c      	movs	r3, #12
 80007c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007cc:	2302      	movs	r3, #2
 80007ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d2:	2300      	movs	r3, #0
 80007d4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007d8:	2303      	movs	r3, #3
 80007da:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007de:	2307      	movs	r3, #7
 80007e0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80007e8:	4619      	mov	r1, r3
 80007ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007ee:	f000 fc7f 	bl	80010f0 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80007f2:	4b31      	ldr	r3, [pc, #196]	; (80008b8 <HAL_UART_MspInit+0x170>)
 80007f4:	4a31      	ldr	r2, [pc, #196]	; (80008bc <HAL_UART_MspInit+0x174>)
 80007f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Request = DMA_REQUEST_2;
 80007f8:	4b2f      	ldr	r3, [pc, #188]	; (80008b8 <HAL_UART_MspInit+0x170>)
 80007fa:	2202      	movs	r2, #2
 80007fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80007fe:	4b2e      	ldr	r3, [pc, #184]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000800:	2200      	movs	r2, #0
 8000802:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000804:	4b2c      	ldr	r3, [pc, #176]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000806:	2200      	movs	r2, #0
 8000808:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800080a:	4b2b      	ldr	r3, [pc, #172]	; (80008b8 <HAL_UART_MspInit+0x170>)
 800080c:	2280      	movs	r2, #128	; 0x80
 800080e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000810:	4b29      	ldr	r3, [pc, #164]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000812:	2200      	movs	r2, #0
 8000814:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000816:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000818:	2200      	movs	r2, #0
 800081a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800081c:	4b26      	ldr	r3, [pc, #152]	; (80008b8 <HAL_UART_MspInit+0x170>)
 800081e:	2200      	movs	r2, #0
 8000820:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000822:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000824:	2200      	movs	r2, #0
 8000826:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000828:	4823      	ldr	r0, [pc, #140]	; (80008b8 <HAL_UART_MspInit+0x170>)
 800082a:	f000 fa7b 	bl	8000d24 <HAL_DMA_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d001      	beq.n	8000838 <HAL_UART_MspInit+0xf0>
    {
      Error_Handler();
 8000834:	f7ff ff5e 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	4a1f      	ldr	r2, [pc, #124]	; (80008b8 <HAL_UART_MspInit+0x170>)
 800083c:	671a      	str	r2, [r3, #112]	; 0x70
 800083e:	4a1e      	ldr	r2, [pc, #120]	; (80008b8 <HAL_UART_MspInit+0x170>)
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000844:	4b1e      	ldr	r3, [pc, #120]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000846:	4a1f      	ldr	r2, [pc, #124]	; (80008c4 <HAL_UART_MspInit+0x17c>)
 8000848:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Request = DMA_REQUEST_2;
 800084a:	4b1d      	ldr	r3, [pc, #116]	; (80008c0 <HAL_UART_MspInit+0x178>)
 800084c:	2202      	movs	r2, #2
 800084e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000850:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000852:	2210      	movs	r2, #16
 8000854:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000856:	4b1a      	ldr	r3, [pc, #104]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000858:	2200      	movs	r2, #0
 800085a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 800085c:	4b18      	ldr	r3, [pc, #96]	; (80008c0 <HAL_UART_MspInit+0x178>)
 800085e:	2280      	movs	r2, #128	; 0x80
 8000860:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000862:	4b17      	ldr	r3, [pc, #92]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000864:	2200      	movs	r2, #0
 8000866:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000868:	4b15      	ldr	r3, [pc, #84]	; (80008c0 <HAL_UART_MspInit+0x178>)
 800086a:	2200      	movs	r2, #0
 800086c:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800086e:	4b14      	ldr	r3, [pc, #80]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000870:	2200      	movs	r2, #0
 8000872:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000874:	4b12      	ldr	r3, [pc, #72]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000876:	2200      	movs	r2, #0
 8000878:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800087a:	4811      	ldr	r0, [pc, #68]	; (80008c0 <HAL_UART_MspInit+0x178>)
 800087c:	f000 fa52 	bl	8000d24 <HAL_DMA_Init>
 8000880:	4603      	mov	r3, r0
 8000882:	2b00      	cmp	r3, #0
 8000884:	d001      	beq.n	800088a <HAL_UART_MspInit+0x142>
    {
      Error_Handler();
 8000886:	f7ff ff35 	bl	80006f4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	4a0c      	ldr	r2, [pc, #48]	; (80008c0 <HAL_UART_MspInit+0x178>)
 800088e:	66da      	str	r2, [r3, #108]	; 0x6c
 8000890:	4a0b      	ldr	r2, [pc, #44]	; (80008c0 <HAL_UART_MspInit+0x178>)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	6293      	str	r3, [r2, #40]	; 0x28

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000896:	2200      	movs	r2, #0
 8000898:	2100      	movs	r1, #0
 800089a:	2026      	movs	r0, #38	; 0x26
 800089c:	f000 fa0b 	bl	8000cb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80008a0:	2026      	movs	r0, #38	; 0x26
 80008a2:	f000 fa24 	bl	8000cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80008a6:	bf00      	nop
 80008a8:	37b0      	adds	r7, #176	; 0xb0
 80008aa:	46bd      	mov	sp, r7
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	40004400 	.word	0x40004400
 80008b4:	40021000 	.word	0x40021000
 80008b8:	20000030 	.word	0x20000030
 80008bc:	4002006c 	.word	0x4002006c
 80008c0:	20000078 	.word	0x20000078
 80008c4:	40020080 	.word	0x40020080

080008c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008cc:	e7fe      	b.n	80008cc <NMI_Handler+0x4>

080008ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008ce:	b480      	push	{r7}
 80008d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008d2:	e7fe      	b.n	80008d2 <HardFault_Handler+0x4>

080008d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008d4:	b480      	push	{r7}
 80008d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008d8:	e7fe      	b.n	80008d8 <MemManage_Handler+0x4>

080008da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008da:	b480      	push	{r7}
 80008dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008de:	e7fe      	b.n	80008de <BusFault_Handler+0x4>

080008e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008e4:	e7fe      	b.n	80008e4 <UsageFault_Handler+0x4>

080008e6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80008e6:	b480      	push	{r7}
 80008e8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80008ea:	bf00      	nop
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr

080008f4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008f8:	bf00      	nop
 80008fa:	46bd      	mov	sp, r7
 80008fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000900:	4770      	bx	lr

08000902 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000902:	b480      	push	{r7}
 8000904:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000906:	bf00      	nop
 8000908:	46bd      	mov	sp, r7
 800090a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800090e:	4770      	bx	lr

08000910 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000914:	f000 f8b0 	bl	8000a78 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000918:	bf00      	nop
 800091a:	bd80      	pop	{r7, pc}

0800091c <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <DMA1_Channel6_IRQHandler+0x10>)
 8000922:	f000 fb36 	bl	8000f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000030 	.word	0x20000030

08000930 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000934:	4802      	ldr	r0, [pc, #8]	; (8000940 <DMA1_Channel7_IRQHandler+0x10>)
 8000936:	f000 fb2c 	bl	8000f92 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	20000078 	.word	0x20000078

08000944 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000948:	4802      	ldr	r0, [pc, #8]	; (8000954 <USART2_IRQHandler+0x10>)
 800094a:	f002 f907 	bl	8002b5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800094e:	bf00      	nop
 8000950:	bd80      	pop	{r7, pc}
 8000952:	bf00      	nop
 8000954:	200000c0 	.word	0x200000c0

08000958 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000958:	b480      	push	{r7}
 800095a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800095c:	4b06      	ldr	r3, [pc, #24]	; (8000978 <SystemInit+0x20>)
 800095e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000962:	4a05      	ldr	r2, [pc, #20]	; (8000978 <SystemInit+0x20>)
 8000964:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000968:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800096c:	bf00      	nop
 800096e:	46bd      	mov	sp, r7
 8000970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop
 8000978:	e000ed00 	.word	0xe000ed00

0800097c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800097c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000980:	f7ff ffea 	bl	8000958 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000984:	480c      	ldr	r0, [pc, #48]	; (80009b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000986:	490d      	ldr	r1, [pc, #52]	; (80009bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000988:	4a0d      	ldr	r2, [pc, #52]	; (80009c0 <LoopForever+0xe>)
  movs r3, #0
 800098a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800098c:	e002      	b.n	8000994 <LoopCopyDataInit>

0800098e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800098e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000990:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000992:	3304      	adds	r3, #4

08000994 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000994:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000996:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000998:	d3f9      	bcc.n	800098e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800099a:	4a0a      	ldr	r2, [pc, #40]	; (80009c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800099c:	4c0a      	ldr	r4, [pc, #40]	; (80009c8 <LoopForever+0x16>)
  movs r3, #0
 800099e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a0:	e001      	b.n	80009a6 <LoopFillZerobss>

080009a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009a4:	3204      	adds	r2, #4

080009a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a8:	d3fb      	bcc.n	80009a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009aa:	f003 f8bf 	bl	8003b2c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009ae:	f7ff fda3 	bl	80004f8 <main>

080009b2 <LoopForever>:

LoopForever:
    b LoopForever
 80009b2:	e7fe      	b.n	80009b2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009b4:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80009b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009bc:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80009c0:	08003bf4 	.word	0x08003bf4
  ldr r2, =_sbss
 80009c4:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80009c8:	20000148 	.word	0x20000148

080009cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009cc:	e7fe      	b.n	80009cc <ADC1_2_IRQHandler>

080009ce <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009ce:	b580      	push	{r7, lr}
 80009d0:	b082      	sub	sp, #8
 80009d2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009d4:	2300      	movs	r3, #0
 80009d6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009d8:	2003      	movs	r0, #3
 80009da:	f000 f961 	bl	8000ca0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009de:	200f      	movs	r0, #15
 80009e0:	f000 f80e 	bl	8000a00 <HAL_InitTick>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d002      	beq.n	80009f0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009ea:	2301      	movs	r3, #1
 80009ec:	71fb      	strb	r3, [r7, #7]
 80009ee:	e001      	b.n	80009f4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f0:	f7ff fe86 	bl	8000700 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009f4:	79fb      	ldrb	r3, [r7, #7]
}
 80009f6:	4618      	mov	r0, r3
 80009f8:	3708      	adds	r7, #8
 80009fa:	46bd      	mov	sp, r7
 80009fc:	bd80      	pop	{r7, pc}
	...

08000a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b084      	sub	sp, #16
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a0c:	4b17      	ldr	r3, [pc, #92]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d023      	beq.n	8000a5c <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a14:	4b16      	ldr	r3, [pc, #88]	; (8000a70 <HAL_InitTick+0x70>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	4b14      	ldr	r3, [pc, #80]	; (8000a6c <HAL_InitTick+0x6c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	4619      	mov	r1, r3
 8000a1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a22:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a26:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a2a:	4618      	mov	r0, r3
 8000a2c:	f000 f96d 	bl	8000d0a <HAL_SYSTICK_Config>
 8000a30:	4603      	mov	r3, r0
 8000a32:	2b00      	cmp	r3, #0
 8000a34:	d10f      	bne.n	8000a56 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a36:	687b      	ldr	r3, [r7, #4]
 8000a38:	2b0f      	cmp	r3, #15
 8000a3a:	d809      	bhi.n	8000a50 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	6879      	ldr	r1, [r7, #4]
 8000a40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000a44:	f000 f937 	bl	8000cb6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a48:	4a0a      	ldr	r2, [pc, #40]	; (8000a74 <HAL_InitTick+0x74>)
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	6013      	str	r3, [r2, #0]
 8000a4e:	e007      	b.n	8000a60 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000a50:	2301      	movs	r3, #1
 8000a52:	73fb      	strb	r3, [r7, #15]
 8000a54:	e004      	b.n	8000a60 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	73fb      	strb	r3, [r7, #15]
 8000a5a:	e001      	b.n	8000a60 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000a5c:	2301      	movs	r3, #1
 8000a5e:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000a60:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3710      	adds	r7, #16
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	20000008 	.word	0x20000008
 8000a70:	20000000 	.word	0x20000000
 8000a74:	20000004 	.word	0x20000004

08000a78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a7c:	4b06      	ldr	r3, [pc, #24]	; (8000a98 <HAL_IncTick+0x20>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	461a      	mov	r2, r3
 8000a82:	4b06      	ldr	r3, [pc, #24]	; (8000a9c <HAL_IncTick+0x24>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	4413      	add	r3, r2
 8000a88:	4a04      	ldr	r2, [pc, #16]	; (8000a9c <HAL_IncTick+0x24>)
 8000a8a:	6013      	str	r3, [r2, #0]
}
 8000a8c:	bf00      	nop
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop
 8000a98:	20000008 	.word	0x20000008
 8000a9c:	20000144 	.word	0x20000144

08000aa0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  return uwTick;
 8000aa4:	4b03      	ldr	r3, [pc, #12]	; (8000ab4 <HAL_GetTick+0x14>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
}
 8000aa8:	4618      	mov	r0, r3
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab0:	4770      	bx	lr
 8000ab2:	bf00      	nop
 8000ab4:	20000144 	.word	0x20000144

08000ab8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b084      	sub	sp, #16
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ac0:	f7ff ffee 	bl	8000aa0 <HAL_GetTick>
 8000ac4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000ad0:	d005      	beq.n	8000ade <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000ad2:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <HAL_Delay+0x44>)
 8000ad4:	781b      	ldrb	r3, [r3, #0]
 8000ad6:	461a      	mov	r2, r3
 8000ad8:	68fb      	ldr	r3, [r7, #12]
 8000ada:	4413      	add	r3, r2
 8000adc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000ade:	bf00      	nop
 8000ae0:	f7ff ffde 	bl	8000aa0 <HAL_GetTick>
 8000ae4:	4602      	mov	r2, r0
 8000ae6:	68bb      	ldr	r3, [r7, #8]
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	68fa      	ldr	r2, [r7, #12]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	d8f7      	bhi.n	8000ae0 <HAL_Delay+0x28>
  {
  }
}
 8000af0:	bf00      	nop
 8000af2:	bf00      	nop
 8000af4:	3710      	adds	r7, #16
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	20000008 	.word	0x20000008

08000b00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b00:	b480      	push	{r7}
 8000b02:	b085      	sub	sp, #20
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	f003 0307 	and.w	r3, r3, #7
 8000b0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b12:	68db      	ldr	r3, [r3, #12]
 8000b14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b16:	68ba      	ldr	r2, [r7, #8]
 8000b18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b1c:	4013      	ands	r3, r2
 8000b1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b20:	68fb      	ldr	r3, [r7, #12]
 8000b22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b24:	68bb      	ldr	r3, [r7, #8]
 8000b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b32:	4a04      	ldr	r2, [pc, #16]	; (8000b44 <__NVIC_SetPriorityGrouping+0x44>)
 8000b34:	68bb      	ldr	r3, [r7, #8]
 8000b36:	60d3      	str	r3, [r2, #12]
}
 8000b38:	bf00      	nop
 8000b3a:	3714      	adds	r7, #20
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b42:	4770      	bx	lr
 8000b44:	e000ed00 	.word	0xe000ed00

08000b48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <__NVIC_GetPriorityGrouping+0x18>)
 8000b4e:	68db      	ldr	r3, [r3, #12]
 8000b50:	0a1b      	lsrs	r3, r3, #8
 8000b52:	f003 0307 	and.w	r3, r3, #7
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	e000ed00 	.word	0xe000ed00

08000b64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	4603      	mov	r3, r0
 8000b6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	db0b      	blt.n	8000b8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b76:	79fb      	ldrb	r3, [r7, #7]
 8000b78:	f003 021f 	and.w	r2, r3, #31
 8000b7c:	4907      	ldr	r1, [pc, #28]	; (8000b9c <__NVIC_EnableIRQ+0x38>)
 8000b7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b82:	095b      	lsrs	r3, r3, #5
 8000b84:	2001      	movs	r0, #1
 8000b86:	fa00 f202 	lsl.w	r2, r0, r2
 8000b8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b8e:	bf00      	nop
 8000b90:	370c      	adds	r7, #12
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	e000e100 	.word	0xe000e100

08000ba0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	6039      	str	r1, [r7, #0]
 8000baa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	db0a      	blt.n	8000bca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bb4:	683b      	ldr	r3, [r7, #0]
 8000bb6:	b2da      	uxtb	r2, r3
 8000bb8:	490c      	ldr	r1, [pc, #48]	; (8000bec <__NVIC_SetPriority+0x4c>)
 8000bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bbe:	0112      	lsls	r2, r2, #4
 8000bc0:	b2d2      	uxtb	r2, r2
 8000bc2:	440b      	add	r3, r1
 8000bc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bc8:	e00a      	b.n	8000be0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bca:	683b      	ldr	r3, [r7, #0]
 8000bcc:	b2da      	uxtb	r2, r3
 8000bce:	4908      	ldr	r1, [pc, #32]	; (8000bf0 <__NVIC_SetPriority+0x50>)
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	f003 030f 	and.w	r3, r3, #15
 8000bd6:	3b04      	subs	r3, #4
 8000bd8:	0112      	lsls	r2, r2, #4
 8000bda:	b2d2      	uxtb	r2, r2
 8000bdc:	440b      	add	r3, r1
 8000bde:	761a      	strb	r2, [r3, #24]
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	e000e100 	.word	0xe000e100
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b089      	sub	sp, #36	; 0x24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	f003 0307 	and.w	r3, r3, #7
 8000c06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c08:	69fb      	ldr	r3, [r7, #28]
 8000c0a:	f1c3 0307 	rsb	r3, r3, #7
 8000c0e:	2b04      	cmp	r3, #4
 8000c10:	bf28      	it	cs
 8000c12:	2304      	movcs	r3, #4
 8000c14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c16:	69fb      	ldr	r3, [r7, #28]
 8000c18:	3304      	adds	r3, #4
 8000c1a:	2b06      	cmp	r3, #6
 8000c1c:	d902      	bls.n	8000c24 <NVIC_EncodePriority+0x30>
 8000c1e:	69fb      	ldr	r3, [r7, #28]
 8000c20:	3b03      	subs	r3, #3
 8000c22:	e000      	b.n	8000c26 <NVIC_EncodePriority+0x32>
 8000c24:	2300      	movs	r3, #0
 8000c26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c28:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c2c:	69bb      	ldr	r3, [r7, #24]
 8000c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c32:	43da      	mvns	r2, r3
 8000c34:	68bb      	ldr	r3, [r7, #8]
 8000c36:	401a      	ands	r2, r3
 8000c38:	697b      	ldr	r3, [r7, #20]
 8000c3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c3c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c40:	697b      	ldr	r3, [r7, #20]
 8000c42:	fa01 f303 	lsl.w	r3, r1, r3
 8000c46:	43d9      	mvns	r1, r3
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c4c:	4313      	orrs	r3, r2
         );
}
 8000c4e:	4618      	mov	r0, r3
 8000c50:	3724      	adds	r7, #36	; 0x24
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
	...

08000c5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	3b01      	subs	r3, #1
 8000c68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c6c:	d301      	bcc.n	8000c72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e00f      	b.n	8000c92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <SysTick_Config+0x40>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	3b01      	subs	r3, #1
 8000c78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000c80:	f7ff ff8e 	bl	8000ba0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c84:	4b05      	ldr	r3, [pc, #20]	; (8000c9c <SysTick_Config+0x40>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c8a:	4b04      	ldr	r3, [pc, #16]	; (8000c9c <SysTick_Config+0x40>)
 8000c8c:	2207      	movs	r2, #7
 8000c8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000c90:	2300      	movs	r3, #0
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	3708      	adds	r7, #8
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	e000e010 	.word	0xe000e010

08000ca0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ca8:	6878      	ldr	r0, [r7, #4]
 8000caa:	f7ff ff29 	bl	8000b00 <__NVIC_SetPriorityGrouping>
}
 8000cae:	bf00      	nop
 8000cb0:	3708      	adds	r7, #8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}

08000cb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cb6:	b580      	push	{r7, lr}
 8000cb8:	b086      	sub	sp, #24
 8000cba:	af00      	add	r7, sp, #0
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	60b9      	str	r1, [r7, #8]
 8000cc0:	607a      	str	r2, [r7, #4]
 8000cc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cc8:	f7ff ff3e 	bl	8000b48 <__NVIC_GetPriorityGrouping>
 8000ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cce:	687a      	ldr	r2, [r7, #4]
 8000cd0:	68b9      	ldr	r1, [r7, #8]
 8000cd2:	6978      	ldr	r0, [r7, #20]
 8000cd4:	f7ff ff8e 	bl	8000bf4 <NVIC_EncodePriority>
 8000cd8:	4602      	mov	r2, r0
 8000cda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000cde:	4611      	mov	r1, r2
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f7ff ff5d 	bl	8000ba0 <__NVIC_SetPriority>
}
 8000ce6:	bf00      	nop
 8000ce8:	3718      	adds	r7, #24
 8000cea:	46bd      	mov	sp, r7
 8000cec:	bd80      	pop	{r7, pc}

08000cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cee:	b580      	push	{r7, lr}
 8000cf0:	b082      	sub	sp, #8
 8000cf2:	af00      	add	r7, sp, #0
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000cf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ff31 	bl	8000b64 <__NVIC_EnableIRQ>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d12:	6878      	ldr	r0, [r7, #4]
 8000d14:	f7ff ffa2 	bl	8000c5c <SysTick_Config>
 8000d18:	4603      	mov	r3, r0
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b085      	sub	sp, #20
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d101      	bne.n	8000d36 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8000d32:	2301      	movs	r3, #1
 8000d34:	e098      	b.n	8000e68 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	4b4d      	ldr	r3, [pc, #308]	; (8000e74 <HAL_DMA_Init+0x150>)
 8000d3e:	429a      	cmp	r2, r3
 8000d40:	d80f      	bhi.n	8000d62 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b4b      	ldr	r3, [pc, #300]	; (8000e78 <HAL_DMA_Init+0x154>)
 8000d4a:	4413      	add	r3, r2
 8000d4c:	4a4b      	ldr	r2, [pc, #300]	; (8000e7c <HAL_DMA_Init+0x158>)
 8000d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d52:	091b      	lsrs	r3, r3, #4
 8000d54:	009a      	lsls	r2, r3, #2
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a48      	ldr	r2, [pc, #288]	; (8000e80 <HAL_DMA_Init+0x15c>)
 8000d5e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d60:	e00e      	b.n	8000d80 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	461a      	mov	r2, r3
 8000d68:	4b46      	ldr	r3, [pc, #280]	; (8000e84 <HAL_DMA_Init+0x160>)
 8000d6a:	4413      	add	r3, r2
 8000d6c:	4a43      	ldr	r2, [pc, #268]	; (8000e7c <HAL_DMA_Init+0x158>)
 8000d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d72:	091b      	lsrs	r3, r3, #4
 8000d74:	009a      	lsls	r2, r3, #2
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	4a42      	ldr	r2, [pc, #264]	; (8000e88 <HAL_DMA_Init+0x164>)
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2202      	movs	r2, #2
 8000d84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8000d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000d9a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8000da4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	691b      	ldr	r3, [r3, #16]
 8000daa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000db0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	699b      	ldr	r3, [r3, #24]
 8000db6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000dbc:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	6a1b      	ldr	r3, [r3, #32]
 8000dc2:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000dc4:	68fa      	ldr	r2, [r7, #12]
 8000dc6:	4313      	orrs	r3, r2
 8000dc8:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	68fa      	ldr	r2, [r7, #12]
 8000dd0:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8000dda:	d039      	beq.n	8000e50 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de0:	4a27      	ldr	r2, [pc, #156]	; (8000e80 <HAL_DMA_Init+0x15c>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d11a      	bne.n	8000e1c <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000de6:	4b29      	ldr	r3, [pc, #164]	; (8000e8c <HAL_DMA_Init+0x168>)
 8000de8:	681a      	ldr	r2, [r3, #0]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dee:	f003 031c 	and.w	r3, r3, #28
 8000df2:	210f      	movs	r1, #15
 8000df4:	fa01 f303 	lsl.w	r3, r1, r3
 8000df8:	43db      	mvns	r3, r3
 8000dfa:	4924      	ldr	r1, [pc, #144]	; (8000e8c <HAL_DMA_Init+0x168>)
 8000dfc:	4013      	ands	r3, r2
 8000dfe:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e00:	4b22      	ldr	r3, [pc, #136]	; (8000e8c <HAL_DMA_Init+0x168>)
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	6859      	ldr	r1, [r3, #4]
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0c:	f003 031c 	and.w	r3, r3, #28
 8000e10:	fa01 f303 	lsl.w	r3, r1, r3
 8000e14:	491d      	ldr	r1, [pc, #116]	; (8000e8c <HAL_DMA_Init+0x168>)
 8000e16:	4313      	orrs	r3, r2
 8000e18:	600b      	str	r3, [r1, #0]
 8000e1a:	e019      	b.n	8000e50 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8000e1c:	4b1c      	ldr	r3, [pc, #112]	; (8000e90 <HAL_DMA_Init+0x16c>)
 8000e1e:	681a      	ldr	r2, [r3, #0]
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e24:	f003 031c 	and.w	r3, r3, #28
 8000e28:	210f      	movs	r1, #15
 8000e2a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2e:	43db      	mvns	r3, r3
 8000e30:	4917      	ldr	r1, [pc, #92]	; (8000e90 <HAL_DMA_Init+0x16c>)
 8000e32:	4013      	ands	r3, r2
 8000e34:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8000e36:	4b16      	ldr	r3, [pc, #88]	; (8000e90 <HAL_DMA_Init+0x16c>)
 8000e38:	681a      	ldr	r2, [r3, #0]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	6859      	ldr	r1, [r3, #4]
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e42:	f003 031c 	and.w	r3, r3, #28
 8000e46:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4a:	4911      	ldr	r1, [pc, #68]	; (8000e90 <HAL_DMA_Init+0x16c>)
 8000e4c:	4313      	orrs	r3, r2
 8000e4e:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	2200      	movs	r2, #0
 8000e54:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	2201      	movs	r2, #1
 8000e5a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	2200      	movs	r2, #0
 8000e62:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8000e66:	2300      	movs	r3, #0
}
 8000e68:	4618      	mov	r0, r3
 8000e6a:	3714      	adds	r7, #20
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e72:	4770      	bx	lr
 8000e74:	40020407 	.word	0x40020407
 8000e78:	bffdfff8 	.word	0xbffdfff8
 8000e7c:	cccccccd 	.word	0xcccccccd
 8000e80:	40020000 	.word	0x40020000
 8000e84:	bffdfbf8 	.word	0xbffdfbf8
 8000e88:	40020400 	.word	0x40020400
 8000e8c:	400200a8 	.word	0x400200a8
 8000e90:	400204a8 	.word	0x400204a8

08000e94 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e94:	b480      	push	{r7}
 8000e96:	b085      	sub	sp, #20
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000ea6:	b2db      	uxtb	r3, r3
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d008      	beq.n	8000ebe <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	2204      	movs	r2, #4
 8000eb0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	e022      	b.n	8000f04 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f022 020e 	bic.w	r2, r2, #14
 8000ecc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	f022 0201 	bic.w	r2, r2, #1
 8000edc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ee2:	f003 021c 	and.w	r2, r3, #28
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	2101      	movs	r1, #1
 8000eec:	fa01 f202 	lsl.w	r2, r1, r2
 8000ef0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	2201      	movs	r2, #1
 8000ef6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000f02:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b084      	sub	sp, #16
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	2b02      	cmp	r3, #2
 8000f26:	d005      	beq.n	8000f34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	73fb      	strb	r3, [r7, #15]
 8000f32:	e029      	b.n	8000f88 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	f022 020e 	bic.w	r2, r2, #14
 8000f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	f022 0201 	bic.w	r2, r2, #1
 8000f52:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f58:	f003 021c 	and.w	r2, r3, #28
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f60:	2101      	movs	r1, #1
 8000f62:	fa01 f202 	lsl.w	r2, r1, r2
 8000f66:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2201      	movs	r2, #1
 8000f6c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	2200      	movs	r2, #0
 8000f74:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d003      	beq.n	8000f88 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000f84:	6878      	ldr	r0, [r7, #4]
 8000f86:	4798      	blx	r3
    }
  }
  return status;
 8000f88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fae:	f003 031c 	and.w	r3, r3, #28
 8000fb2:	2204      	movs	r2, #4
 8000fb4:	409a      	lsls	r2, r3
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4013      	ands	r3, r2
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d026      	beq.n	800100c <HAL_DMA_IRQHandler+0x7a>
 8000fbe:	68bb      	ldr	r3, [r7, #8]
 8000fc0:	f003 0304 	and.w	r3, r3, #4
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d021      	beq.n	800100c <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0320 	and.w	r3, r3, #32
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d107      	bne.n	8000fe6 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	681a      	ldr	r2, [r3, #0]
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	f022 0204 	bic.w	r2, r2, #4
 8000fe4:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fea:	f003 021c 	and.w	r2, r3, #28
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	2104      	movs	r1, #4
 8000ff4:	fa01 f202 	lsl.w	r2, r1, r2
 8000ff8:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d071      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 800100a:	e06c      	b.n	80010e6 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001010:	f003 031c 	and.w	r3, r3, #28
 8001014:	2202      	movs	r2, #2
 8001016:	409a      	lsls	r2, r3
 8001018:	68fb      	ldr	r3, [r7, #12]
 800101a:	4013      	ands	r3, r2
 800101c:	2b00      	cmp	r3, #0
 800101e:	d02e      	beq.n	800107e <HAL_DMA_IRQHandler+0xec>
 8001020:	68bb      	ldr	r3, [r7, #8]
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	2b00      	cmp	r3, #0
 8001028:	d029      	beq.n	800107e <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	f003 0320 	and.w	r3, r3, #32
 8001034:	2b00      	cmp	r3, #0
 8001036:	d10b      	bne.n	8001050 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	681a      	ldr	r2, [r3, #0]
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	f022 020a 	bic.w	r2, r2, #10
 8001046:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	2201      	movs	r2, #1
 800104c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001054:	f003 021c 	and.w	r2, r3, #28
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105c:	2102      	movs	r1, #2
 800105e:	fa01 f202 	lsl.w	r2, r1, r2
 8001062:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001070:	2b00      	cmp	r3, #0
 8001072:	d038      	beq.n	80010e6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800107c:	e033      	b.n	80010e6 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001082:	f003 031c 	and.w	r3, r3, #28
 8001086:	2208      	movs	r2, #8
 8001088:	409a      	lsls	r2, r3
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4013      	ands	r3, r2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d02a      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x156>
 8001092:	68bb      	ldr	r3, [r7, #8]
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	2b00      	cmp	r3, #0
 800109a:	d025      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681a      	ldr	r2, [r3, #0]
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	f022 020e 	bic.w	r2, r2, #14
 80010aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010b0:	f003 021c 	and.w	r2, r3, #28
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b8:	2101      	movs	r1, #1
 80010ba:	fa01 f202 	lsl.w	r2, r1, r2
 80010be:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	2201      	movs	r2, #1
 80010c4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2201      	movs	r2, #1
 80010ca:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	2200      	movs	r2, #0
 80010d2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d004      	beq.n	80010e8 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80010e6:	bf00      	nop
 80010e8:	bf00      	nop
}
 80010ea:	3710      	adds	r7, #16
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b087      	sub	sp, #28
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
 80010f8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010fa:	2300      	movs	r3, #0
 80010fc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010fe:	e17f      	b.n	8001400 <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	681a      	ldr	r2, [r3, #0]
 8001104:	2101      	movs	r1, #1
 8001106:	697b      	ldr	r3, [r7, #20]
 8001108:	fa01 f303 	lsl.w	r3, r1, r3
 800110c:	4013      	ands	r3, r2
 800110e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2b00      	cmp	r3, #0
 8001114:	f000 8171 	beq.w	80013fa <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001118:	683b      	ldr	r3, [r7, #0]
 800111a:	685b      	ldr	r3, [r3, #4]
 800111c:	f003 0303 	and.w	r3, r3, #3
 8001120:	2b01      	cmp	r3, #1
 8001122:	d005      	beq.n	8001130 <HAL_GPIO_Init+0x40>
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	685b      	ldr	r3, [r3, #4]
 8001128:	f003 0303 	and.w	r3, r3, #3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d130      	bne.n	8001192 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	689b      	ldr	r3, [r3, #8]
 8001134:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001136:	697b      	ldr	r3, [r7, #20]
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	2203      	movs	r2, #3
 800113c:	fa02 f303 	lsl.w	r3, r2, r3
 8001140:	43db      	mvns	r3, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4013      	ands	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001148:	683b      	ldr	r3, [r7, #0]
 800114a:	68da      	ldr	r2, [r3, #12]
 800114c:	697b      	ldr	r3, [r7, #20]
 800114e:	005b      	lsls	r3, r3, #1
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	693a      	ldr	r2, [r7, #16]
 800115e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	685b      	ldr	r3, [r3, #4]
 8001164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001166:	2201      	movs	r2, #1
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa02 f303 	lsl.w	r3, r2, r3
 800116e:	43db      	mvns	r3, r3
 8001170:	693a      	ldr	r2, [r7, #16]
 8001172:	4013      	ands	r3, r2
 8001174:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	091b      	lsrs	r3, r3, #4
 800117c:	f003 0201 	and.w	r2, r3, #1
 8001180:	697b      	ldr	r3, [r7, #20]
 8001182:	fa02 f303 	lsl.w	r3, r2, r3
 8001186:	693a      	ldr	r2, [r7, #16]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	693a      	ldr	r2, [r7, #16]
 8001190:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8001192:	683b      	ldr	r3, [r7, #0]
 8001194:	685b      	ldr	r3, [r3, #4]
 8001196:	f003 0303 	and.w	r3, r3, #3
 800119a:	2b03      	cmp	r3, #3
 800119c:	d118      	bne.n	80011d0 <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80011a2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80011a4:	2201      	movs	r2, #1
 80011a6:	697b      	ldr	r3, [r7, #20]
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	43db      	mvns	r3, r3
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	4013      	ands	r3, r2
 80011b2:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	685b      	ldr	r3, [r3, #4]
 80011b8:	08db      	lsrs	r3, r3, #3
 80011ba:	f003 0201 	and.w	r2, r3, #1
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	fa02 f303 	lsl.w	r3, r2, r3
 80011c4:	693a      	ldr	r2, [r7, #16]
 80011c6:	4313      	orrs	r3, r2
 80011c8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	693a      	ldr	r2, [r7, #16]
 80011ce:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	685b      	ldr	r3, [r3, #4]
 80011d4:	f003 0303 	and.w	r3, r3, #3
 80011d8:	2b03      	cmp	r3, #3
 80011da:	d017      	beq.n	800120c <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	005b      	lsls	r3, r3, #1
 80011e6:	2203      	movs	r2, #3
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	693a      	ldr	r2, [r7, #16]
 80011f0:	4013      	ands	r3, r2
 80011f2:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	005b      	lsls	r3, r3, #1
 80011fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001200:	693a      	ldr	r2, [r7, #16]
 8001202:	4313      	orrs	r3, r2
 8001204:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	f003 0303 	and.w	r3, r3, #3
 8001214:	2b02      	cmp	r3, #2
 8001216:	d123      	bne.n	8001260 <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	08da      	lsrs	r2, r3, #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3208      	adds	r2, #8
 8001220:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001224:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	f003 0307 	and.w	r3, r3, #7
 800122c:	009b      	lsls	r3, r3, #2
 800122e:	220f      	movs	r2, #15
 8001230:	fa02 f303 	lsl.w	r3, r2, r3
 8001234:	43db      	mvns	r3, r3
 8001236:	693a      	ldr	r2, [r7, #16]
 8001238:	4013      	ands	r3, r2
 800123a:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	691a      	ldr	r2, [r3, #16]
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	fa02 f303 	lsl.w	r3, r2, r3
 800124c:	693a      	ldr	r2, [r7, #16]
 800124e:	4313      	orrs	r3, r2
 8001250:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	08da      	lsrs	r2, r3, #3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	3208      	adds	r2, #8
 800125a:	6939      	ldr	r1, [r7, #16]
 800125c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	005b      	lsls	r3, r3, #1
 800126a:	2203      	movs	r2, #3
 800126c:	fa02 f303 	lsl.w	r3, r2, r3
 8001270:	43db      	mvns	r3, r3
 8001272:	693a      	ldr	r2, [r7, #16]
 8001274:	4013      	ands	r3, r2
 8001276:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f003 0203 	and.w	r2, r3, #3
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	fa02 f303 	lsl.w	r3, r2, r3
 8001288:	693a      	ldr	r2, [r7, #16]
 800128a:	4313      	orrs	r3, r2
 800128c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	693a      	ldr	r2, [r7, #16]
 8001292:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800129c:	2b00      	cmp	r3, #0
 800129e:	f000 80ac 	beq.w	80013fa <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012a2:	4b5f      	ldr	r3, [pc, #380]	; (8001420 <HAL_GPIO_Init+0x330>)
 80012a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012a6:	4a5e      	ldr	r2, [pc, #376]	; (8001420 <HAL_GPIO_Init+0x330>)
 80012a8:	f043 0301 	orr.w	r3, r3, #1
 80012ac:	6613      	str	r3, [r2, #96]	; 0x60
 80012ae:	4b5c      	ldr	r3, [pc, #368]	; (8001420 <HAL_GPIO_Init+0x330>)
 80012b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	60bb      	str	r3, [r7, #8]
 80012b8:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012ba:	4a5a      	ldr	r2, [pc, #360]	; (8001424 <HAL_GPIO_Init+0x334>)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	089b      	lsrs	r3, r3, #2
 80012c0:	3302      	adds	r3, #2
 80012c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	f003 0303 	and.w	r3, r3, #3
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	220f      	movs	r2, #15
 80012d2:	fa02 f303 	lsl.w	r3, r2, r3
 80012d6:	43db      	mvns	r3, r3
 80012d8:	693a      	ldr	r2, [r7, #16]
 80012da:	4013      	ands	r3, r2
 80012dc:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80012e4:	d025      	beq.n	8001332 <HAL_GPIO_Init+0x242>
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	4a4f      	ldr	r2, [pc, #316]	; (8001428 <HAL_GPIO_Init+0x338>)
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d01f      	beq.n	800132e <HAL_GPIO_Init+0x23e>
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	4a4e      	ldr	r2, [pc, #312]	; (800142c <HAL_GPIO_Init+0x33c>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d019      	beq.n	800132a <HAL_GPIO_Init+0x23a>
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	4a4d      	ldr	r2, [pc, #308]	; (8001430 <HAL_GPIO_Init+0x340>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d013      	beq.n	8001326 <HAL_GPIO_Init+0x236>
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	4a4c      	ldr	r2, [pc, #304]	; (8001434 <HAL_GPIO_Init+0x344>)
 8001302:	4293      	cmp	r3, r2
 8001304:	d00d      	beq.n	8001322 <HAL_GPIO_Init+0x232>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	4a4b      	ldr	r2, [pc, #300]	; (8001438 <HAL_GPIO_Init+0x348>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d007      	beq.n	800131e <HAL_GPIO_Init+0x22e>
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4a4a      	ldr	r2, [pc, #296]	; (800143c <HAL_GPIO_Init+0x34c>)
 8001312:	4293      	cmp	r3, r2
 8001314:	d101      	bne.n	800131a <HAL_GPIO_Init+0x22a>
 8001316:	2306      	movs	r3, #6
 8001318:	e00c      	b.n	8001334 <HAL_GPIO_Init+0x244>
 800131a:	2307      	movs	r3, #7
 800131c:	e00a      	b.n	8001334 <HAL_GPIO_Init+0x244>
 800131e:	2305      	movs	r3, #5
 8001320:	e008      	b.n	8001334 <HAL_GPIO_Init+0x244>
 8001322:	2304      	movs	r3, #4
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x244>
 8001326:	2303      	movs	r3, #3
 8001328:	e004      	b.n	8001334 <HAL_GPIO_Init+0x244>
 800132a:	2302      	movs	r3, #2
 800132c:	e002      	b.n	8001334 <HAL_GPIO_Init+0x244>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <HAL_GPIO_Init+0x244>
 8001332:	2300      	movs	r3, #0
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	f002 0203 	and.w	r2, r2, #3
 800133a:	0092      	lsls	r2, r2, #2
 800133c:	4093      	lsls	r3, r2
 800133e:	693a      	ldr	r2, [r7, #16]
 8001340:	4313      	orrs	r3, r2
 8001342:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001344:	4937      	ldr	r1, [pc, #220]	; (8001424 <HAL_GPIO_Init+0x334>)
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	089b      	lsrs	r3, r3, #2
 800134a:	3302      	adds	r3, #2
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001352:	4b3b      	ldr	r3, [pc, #236]	; (8001440 <HAL_GPIO_Init+0x350>)
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	43db      	mvns	r3, r3
 800135c:	693a      	ldr	r2, [r7, #16]
 800135e:	4013      	ands	r3, r2
 8001360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d003      	beq.n	8001376 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800136e:	693a      	ldr	r2, [r7, #16]
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	4313      	orrs	r3, r2
 8001374:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001376:	4a32      	ldr	r2, [pc, #200]	; (8001440 <HAL_GPIO_Init+0x350>)
 8001378:	693b      	ldr	r3, [r7, #16]
 800137a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800137c:	4b30      	ldr	r3, [pc, #192]	; (8001440 <HAL_GPIO_Init+0x350>)
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	43db      	mvns	r3, r3
 8001386:	693a      	ldr	r2, [r7, #16]
 8001388:	4013      	ands	r3, r2
 800138a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001398:	693a      	ldr	r2, [r7, #16]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4313      	orrs	r3, r2
 800139e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013a0:	4a27      	ldr	r2, [pc, #156]	; (8001440 <HAL_GPIO_Init+0x350>)
 80013a2:	693b      	ldr	r3, [r7, #16]
 80013a4:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <HAL_GPIO_Init+0x350>)
 80013a8:	685b      	ldr	r3, [r3, #4]
 80013aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	43db      	mvns	r3, r3
 80013b0:	693a      	ldr	r2, [r7, #16]
 80013b2:	4013      	ands	r3, r2
 80013b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013b6:	683b      	ldr	r3, [r7, #0]
 80013b8:	685b      	ldr	r3, [r3, #4]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d003      	beq.n	80013ca <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013ca:	4a1d      	ldr	r2, [pc, #116]	; (8001440 <HAL_GPIO_Init+0x350>)
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013d0:	4b1b      	ldr	r3, [pc, #108]	; (8001440 <HAL_GPIO_Init+0x350>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	43db      	mvns	r3, r3
 80013da:	693a      	ldr	r2, [r7, #16]
 80013dc:	4013      	ands	r3, r2
 80013de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d003      	beq.n	80013f4 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80013ec:	693a      	ldr	r2, [r7, #16]
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <HAL_GPIO_Init+0x350>)
 80013f6:	693b      	ldr	r3, [r7, #16]
 80013f8:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80013fa:	697b      	ldr	r3, [r7, #20]
 80013fc:	3301      	adds	r3, #1
 80013fe:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	697b      	ldr	r3, [r7, #20]
 8001406:	fa22 f303 	lsr.w	r3, r2, r3
 800140a:	2b00      	cmp	r3, #0
 800140c:	f47f ae78 	bne.w	8001100 <HAL_GPIO_Init+0x10>
  }
}
 8001410:	bf00      	nop
 8001412:	bf00      	nop
 8001414:	371c      	adds	r7, #28
 8001416:	46bd      	mov	sp, r7
 8001418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141c:	4770      	bx	lr
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000
 8001424:	40010000 	.word	0x40010000
 8001428:	48000400 	.word	0x48000400
 800142c:	48000800 	.word	0x48000800
 8001430:	48000c00 	.word	0x48000c00
 8001434:	48001000 	.word	0x48001000
 8001438:	48001400 	.word	0x48001400
 800143c:	48001800 	.word	0x48001800
 8001440:	40010400 	.word	0x40010400

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001460:	e002      	b.n	8001468 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001462:	887a      	ldrh	r2, [r7, #2]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001468:	bf00      	nop
 800146a:	370c      	adds	r7, #12
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001474:	b480      	push	{r7}
 8001476:	b085      	sub	sp, #20
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
 800147c:	460b      	mov	r3, r1
 800147e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	695b      	ldr	r3, [r3, #20]
 8001484:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001486:	887a      	ldrh	r2, [r7, #2]
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4013      	ands	r3, r2
 800148c:	041a      	lsls	r2, r3, #16
 800148e:	68fb      	ldr	r3, [r7, #12]
 8001490:	43d9      	mvns	r1, r3
 8001492:	887b      	ldrh	r3, [r7, #2]
 8001494:	400b      	ands	r3, r1
 8001496:	431a      	orrs	r2, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
}
 800149c:	bf00      	nop
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr

080014a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
 80014be:	bf00      	nop
 80014c0:	40007000 	.word	0x40007000

080014c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014d2:	d130      	bne.n	8001536 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80014dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014e0:	d038      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014e2:	4b20      	ldr	r3, [pc, #128]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80014ea:	4a1e      	ldr	r2, [pc, #120]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	2232      	movs	r2, #50	; 0x32
 80014f8:	fb02 f303 	mul.w	r3, r2, r3
 80014fc:	4a1b      	ldr	r2, [pc, #108]	; (800156c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80014fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001502:	0c9b      	lsrs	r3, r3, #18
 8001504:	3301      	adds	r3, #1
 8001506:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001508:	e002      	b.n	8001510 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	3b01      	subs	r3, #1
 800150e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001512:	695b      	ldr	r3, [r3, #20]
 8001514:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001518:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800151c:	d102      	bne.n	8001524 <HAL_PWREx_ControlVoltageScaling+0x60>
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2b00      	cmp	r3, #0
 8001522:	d1f2      	bne.n	800150a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001524:	4b0f      	ldr	r3, [pc, #60]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001526:	695b      	ldr	r3, [r3, #20]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001530:	d110      	bne.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e00f      	b.n	8001556 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001536:	4b0b      	ldr	r3, [pc, #44]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800153e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001542:	d007      	beq.n	8001554 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001544:	4b07      	ldr	r3, [pc, #28]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800154c:	4a05      	ldr	r2, [pc, #20]	; (8001564 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001552:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001554:	2300      	movs	r3, #0
}
 8001556:	4618      	mov	r0, r3
 8001558:	3714      	adds	r7, #20
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40007000 	.word	0x40007000
 8001568:	20000000 	.word	0x20000000
 800156c:	431bde83 	.word	0x431bde83

08001570 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b088      	sub	sp, #32
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2b00      	cmp	r3, #0
 800157c:	d101      	bne.n	8001582 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800157e:	2301      	movs	r3, #1
 8001580:	e3d4      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001582:	4ba1      	ldr	r3, [pc, #644]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f003 030c 	and.w	r3, r3, #12
 800158a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800158c:	4b9e      	ldr	r3, [pc, #632]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800158e:	68db      	ldr	r3, [r3, #12]
 8001590:	f003 0303 	and.w	r3, r3, #3
 8001594:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	f003 0310 	and.w	r3, r3, #16
 800159e:	2b00      	cmp	r3, #0
 80015a0:	f000 80e4 	beq.w	800176c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015a4:	69bb      	ldr	r3, [r7, #24]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d007      	beq.n	80015ba <HAL_RCC_OscConfig+0x4a>
 80015aa:	69bb      	ldr	r3, [r7, #24]
 80015ac:	2b0c      	cmp	r3, #12
 80015ae:	f040 808b 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015b2:	697b      	ldr	r3, [r7, #20]
 80015b4:	2b01      	cmp	r3, #1
 80015b6:	f040 8087 	bne.w	80016c8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015ba:	4b93      	ldr	r3, [pc, #588]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d005      	beq.n	80015d2 <HAL_RCC_OscConfig+0x62>
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	699b      	ldr	r3, [r3, #24]
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d101      	bne.n	80015d2 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e3ac      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6a1a      	ldr	r2, [r3, #32]
 80015d6:	4b8c      	ldr	r3, [pc, #560]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f003 0308 	and.w	r3, r3, #8
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d004      	beq.n	80015ec <HAL_RCC_OscConfig+0x7c>
 80015e2:	4b89      	ldr	r3, [pc, #548]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015ea:	e005      	b.n	80015f8 <HAL_RCC_OscConfig+0x88>
 80015ec:	4b86      	ldr	r3, [pc, #536]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80015ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015f2:	091b      	lsrs	r3, r3, #4
 80015f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d223      	bcs.n	8001644 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1b      	ldr	r3, [r3, #32]
 8001600:	4618      	mov	r0, r3
 8001602:	f000 fd41 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 8001606:	4603      	mov	r3, r0
 8001608:	2b00      	cmp	r3, #0
 800160a:	d001      	beq.n	8001610 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e38d      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001610:	4b7d      	ldr	r3, [pc, #500]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a7c      	ldr	r2, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001616:	f043 0308 	orr.w	r3, r3, #8
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b7a      	ldr	r3, [pc, #488]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	6a1b      	ldr	r3, [r3, #32]
 8001628:	4977      	ldr	r1, [pc, #476]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800162a:	4313      	orrs	r3, r2
 800162c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800162e:	4b76      	ldr	r3, [pc, #472]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001630:	685b      	ldr	r3, [r3, #4]
 8001632:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	69db      	ldr	r3, [r3, #28]
 800163a:	021b      	lsls	r3, r3, #8
 800163c:	4972      	ldr	r1, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800163e:	4313      	orrs	r3, r2
 8001640:	604b      	str	r3, [r1, #4]
 8001642:	e025      	b.n	8001690 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001644:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	4a6f      	ldr	r2, [pc, #444]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6013      	str	r3, [r2, #0]
 8001650:	4b6d      	ldr	r3, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6a1b      	ldr	r3, [r3, #32]
 800165c:	496a      	ldr	r1, [pc, #424]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800165e:	4313      	orrs	r3, r2
 8001660:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001662:	4b69      	ldr	r3, [pc, #420]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001664:	685b      	ldr	r3, [r3, #4]
 8001666:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	021b      	lsls	r3, r3, #8
 8001670:	4965      	ldr	r1, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001672:	4313      	orrs	r3, r2
 8001674:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001676:	69bb      	ldr	r3, [r7, #24]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d109      	bne.n	8001690 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6a1b      	ldr	r3, [r3, #32]
 8001680:	4618      	mov	r0, r3
 8001682:	f000 fd01 	bl	8002088 <RCC_SetFlashLatencyFromMSIRange>
 8001686:	4603      	mov	r3, r0
 8001688:	2b00      	cmp	r3, #0
 800168a:	d001      	beq.n	8001690 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 800168c:	2301      	movs	r3, #1
 800168e:	e34d      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001690:	f000 fc36 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001694:	4602      	mov	r2, r0
 8001696:	4b5c      	ldr	r3, [pc, #368]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	091b      	lsrs	r3, r3, #4
 800169c:	f003 030f 	and.w	r3, r3, #15
 80016a0:	495a      	ldr	r1, [pc, #360]	; (800180c <HAL_RCC_OscConfig+0x29c>)
 80016a2:	5ccb      	ldrb	r3, [r1, r3]
 80016a4:	f003 031f 	and.w	r3, r3, #31
 80016a8:	fa22 f303 	lsr.w	r3, r2, r3
 80016ac:	4a58      	ldr	r2, [pc, #352]	; (8001810 <HAL_RCC_OscConfig+0x2a0>)
 80016ae:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016b0:	4b58      	ldr	r3, [pc, #352]	; (8001814 <HAL_RCC_OscConfig+0x2a4>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4618      	mov	r0, r3
 80016b6:	f7ff f9a3 	bl	8000a00 <HAL_InitTick>
 80016ba:	4603      	mov	r3, r0
 80016bc:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016be:	7bfb      	ldrb	r3, [r7, #15]
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d052      	beq.n	800176a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
 80016c6:	e331      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	699b      	ldr	r3, [r3, #24]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d032      	beq.n	8001736 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016d0:	4b4d      	ldr	r3, [pc, #308]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4a4c      	ldr	r2, [pc, #304]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80016d6:	f043 0301 	orr.w	r3, r3, #1
 80016da:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80016dc:	f7ff f9e0 	bl	8000aa0 <HAL_GetTick>
 80016e0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016e2:	e008      	b.n	80016f6 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80016e4:	f7ff f9dc 	bl	8000aa0 <HAL_GetTick>
 80016e8:	4602      	mov	r2, r0
 80016ea:	693b      	ldr	r3, [r7, #16]
 80016ec:	1ad3      	subs	r3, r2, r3
 80016ee:	2b02      	cmp	r3, #2
 80016f0:	d901      	bls.n	80016f6 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 80016f2:	2303      	movs	r3, #3
 80016f4:	e31a      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80016f6:	4b44      	ldr	r3, [pc, #272]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d0f0      	beq.n	80016e4 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001702:	4b41      	ldr	r3, [pc, #260]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	4a40      	ldr	r2, [pc, #256]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001708:	f043 0308 	orr.w	r3, r3, #8
 800170c:	6013      	str	r3, [r2, #0]
 800170e:	4b3e      	ldr	r3, [pc, #248]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	493b      	ldr	r1, [pc, #236]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800171c:	4313      	orrs	r3, r2
 800171e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	69db      	ldr	r3, [r3, #28]
 800172c:	021b      	lsls	r3, r3, #8
 800172e:	4936      	ldr	r1, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001730:	4313      	orrs	r3, r2
 8001732:	604b      	str	r3, [r1, #4]
 8001734:	e01a      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001736:	4b34      	ldr	r3, [pc, #208]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	4a33      	ldr	r2, [pc, #204]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800173c:	f023 0301 	bic.w	r3, r3, #1
 8001740:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001742:	f7ff f9ad 	bl	8000aa0 <HAL_GetTick>
 8001746:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001748:	e008      	b.n	800175c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800174a:	f7ff f9a9 	bl	8000aa0 <HAL_GetTick>
 800174e:	4602      	mov	r2, r0
 8001750:	693b      	ldr	r3, [r7, #16]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	2b02      	cmp	r3, #2
 8001756:	d901      	bls.n	800175c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8001758:	2303      	movs	r3, #3
 800175a:	e2e7      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800175c:	4b2a      	ldr	r3, [pc, #168]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0302 	and.w	r3, r3, #2
 8001764:	2b00      	cmp	r3, #0
 8001766:	d1f0      	bne.n	800174a <HAL_RCC_OscConfig+0x1da>
 8001768:	e000      	b.n	800176c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800176a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f003 0301 	and.w	r3, r3, #1
 8001774:	2b00      	cmp	r3, #0
 8001776:	d074      	beq.n	8001862 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	2b08      	cmp	r3, #8
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x21a>
 800177e:	69bb      	ldr	r3, [r7, #24]
 8001780:	2b0c      	cmp	r3, #12
 8001782:	d10e      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	2b03      	cmp	r3, #3
 8001788:	d10b      	bne.n	80017a2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800178a:	4b1f      	ldr	r3, [pc, #124]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001792:	2b00      	cmp	r3, #0
 8001794:	d064      	beq.n	8001860 <HAL_RCC_OscConfig+0x2f0>
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d160      	bne.n	8001860 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800179e:	2301      	movs	r3, #1
 80017a0:	e2c4      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017aa:	d106      	bne.n	80017ba <HAL_RCC_OscConfig+0x24a>
 80017ac:	4b16      	ldr	r3, [pc, #88]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a15      	ldr	r2, [pc, #84]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017b6:	6013      	str	r3, [r2, #0]
 80017b8:	e01d      	b.n	80017f6 <HAL_RCC_OscConfig+0x286>
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	685b      	ldr	r3, [r3, #4]
 80017be:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017c2:	d10c      	bne.n	80017de <HAL_RCC_OscConfig+0x26e>
 80017c4:	4b10      	ldr	r3, [pc, #64]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4a0f      	ldr	r2, [pc, #60]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017ce:	6013      	str	r3, [r2, #0]
 80017d0:	4b0d      	ldr	r3, [pc, #52]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a0c      	ldr	r2, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017da:	6013      	str	r3, [r2, #0]
 80017dc:	e00b      	b.n	80017f6 <HAL_RCC_OscConfig+0x286>
 80017de:	4b0a      	ldr	r3, [pc, #40]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	4a09      	ldr	r2, [pc, #36]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017e4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80017e8:	6013      	str	r3, [r2, #0]
 80017ea:	4b07      	ldr	r3, [pc, #28]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	4a06      	ldr	r2, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x298>)
 80017f0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80017f4:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01c      	beq.n	8001838 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017fe:	f7ff f94f 	bl	8000aa0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001804:	e011      	b.n	800182a <HAL_RCC_OscConfig+0x2ba>
 8001806:	bf00      	nop
 8001808:	40021000 	.word	0x40021000
 800180c:	08003b9c 	.word	0x08003b9c
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001818:	f7ff f942 	bl	8000aa0 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b64      	cmp	r3, #100	; 0x64
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e280      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800182a:	4baf      	ldr	r3, [pc, #700]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x2a8>
 8001836:	e014      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff f932 	bl	8000aa0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff f92e 	bl	8000aa0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e26c      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001852:	4ba5      	ldr	r3, [pc, #660]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d1f0      	bne.n	8001840 <HAL_RCC_OscConfig+0x2d0>
 800185e:	e000      	b.n	8001862 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001860:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	f003 0302 	and.w	r3, r3, #2
 800186a:	2b00      	cmp	r3, #0
 800186c:	d060      	beq.n	8001930 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b04      	cmp	r3, #4
 8001872:	d005      	beq.n	8001880 <HAL_RCC_OscConfig+0x310>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	d119      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800187a:	697b      	ldr	r3, [r7, #20]
 800187c:	2b02      	cmp	r3, #2
 800187e:	d116      	bne.n	80018ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001880:	4b99      	ldr	r3, [pc, #612]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001888:	2b00      	cmp	r3, #0
 800188a:	d005      	beq.n	8001898 <HAL_RCC_OscConfig+0x328>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d101      	bne.n	8001898 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e249      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001898:	4b93      	ldr	r3, [pc, #588]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	4990      	ldr	r1, [pc, #576]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018ac:	e040      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	68db      	ldr	r3, [r3, #12]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d023      	beq.n	80018fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018b6:	4b8c      	ldr	r3, [pc, #560]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a8b      	ldr	r2, [pc, #556]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c2:	f7ff f8ed 	bl	8000aa0 <HAL_GetTick>
 80018c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018c8:	e008      	b.n	80018dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018ca:	f7ff f8e9 	bl	8000aa0 <HAL_GetTick>
 80018ce:	4602      	mov	r2, r0
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	1ad3      	subs	r3, r2, r3
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d901      	bls.n	80018dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80018d8:	2303      	movs	r3, #3
 80018da:	e227      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018dc:	4b82      	ldr	r3, [pc, #520]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018e4:	2b00      	cmp	r3, #0
 80018e6:	d0f0      	beq.n	80018ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018e8:	4b7f      	ldr	r3, [pc, #508]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018ea:	685b      	ldr	r3, [r3, #4]
 80018ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	691b      	ldr	r3, [r3, #16]
 80018f4:	061b      	lsls	r3, r3, #24
 80018f6:	497c      	ldr	r1, [pc, #496]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80018f8:	4313      	orrs	r3, r2
 80018fa:	604b      	str	r3, [r1, #4]
 80018fc:	e018      	b.n	8001930 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018fe:	4b7a      	ldr	r3, [pc, #488]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a79      	ldr	r2, [pc, #484]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001904:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001908:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800190a:	f7ff f8c9 	bl	8000aa0 <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001912:	f7ff f8c5 	bl	8000aa0 <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e203      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001924:	4b70      	ldr	r3, [pc, #448]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	695b      	ldr	r3, [r3, #20]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001944:	4b68      	ldr	r3, [pc, #416]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001946:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800194a:	4a67      	ldr	r2, [pc, #412]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f8a4 	bl	8000aa0 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800195c:	f7ff f8a0 	bl	8000aa0 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e1de      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800196e:	4b5e      	ldr	r3, [pc, #376]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001970:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCC_OscConfig+0x3ec>
 800197c:	e01b      	b.n	80019b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800197e:	4b5a      	ldr	r3, [pc, #360]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001980:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001984:	4a58      	ldr	r2, [pc, #352]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f887 	bl	8000aa0 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001996:	f7ff f883 	bl	8000aa0 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e1c1      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019a8:	4b4f      	ldr	r3, [pc, #316]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80019aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0304 	and.w	r3, r3, #4
 80019be:	2b00      	cmp	r3, #0
 80019c0:	f000 80a6 	beq.w	8001b10 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019c4:	2300      	movs	r3, #0
 80019c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019c8:	4b47      	ldr	r3, [pc, #284]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d10d      	bne.n	80019f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	4b44      	ldr	r3, [pc, #272]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80019d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019d8:	4a43      	ldr	r2, [pc, #268]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80019da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019de:	6593      	str	r3, [r2, #88]	; 0x58
 80019e0:	4b41      	ldr	r3, [pc, #260]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 80019e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019e8:	60bb      	str	r3, [r7, #8]
 80019ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80019ec:	2301      	movs	r3, #1
 80019ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80019f0:	4b3e      	ldr	r3, [pc, #248]	; (8001aec <HAL_RCC_OscConfig+0x57c>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d118      	bne.n	8001a2e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019fc:	4b3b      	ldr	r3, [pc, #236]	; (8001aec <HAL_RCC_OscConfig+0x57c>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a3a      	ldr	r2, [pc, #232]	; (8001aec <HAL_RCC_OscConfig+0x57c>)
 8001a02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a06:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a08:	f7ff f84a 	bl	8000aa0 <HAL_GetTick>
 8001a0c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a0e:	e008      	b.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a10:	f7ff f846 	bl	8000aa0 <HAL_GetTick>
 8001a14:	4602      	mov	r2, r0
 8001a16:	693b      	ldr	r3, [r7, #16]
 8001a18:	1ad3      	subs	r3, r2, r3
 8001a1a:	2b02      	cmp	r3, #2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e184      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a22:	4b32      	ldr	r3, [pc, #200]	; (8001aec <HAL_RCC_OscConfig+0x57c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d0f0      	beq.n	8001a10 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d108      	bne.n	8001a48 <HAL_RCC_OscConfig+0x4d8>
 8001a36:	4b2c      	ldr	r3, [pc, #176]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a3c:	4a2a      	ldr	r2, [pc, #168]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a3e:	f043 0301 	orr.w	r3, r3, #1
 8001a42:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a46:	e024      	b.n	8001a92 <HAL_RCC_OscConfig+0x522>
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	2b05      	cmp	r3, #5
 8001a4e:	d110      	bne.n	8001a72 <HAL_RCC_OscConfig+0x502>
 8001a50:	4b25      	ldr	r3, [pc, #148]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a52:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a56:	4a24      	ldr	r2, [pc, #144]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a58:	f043 0304 	orr.w	r3, r3, #4
 8001a5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a60:	4b21      	ldr	r3, [pc, #132]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a66:	4a20      	ldr	r2, [pc, #128]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a68:	f043 0301 	orr.w	r3, r3, #1
 8001a6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a70:	e00f      	b.n	8001a92 <HAL_RCC_OscConfig+0x522>
 8001a72:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a78:	4a1b      	ldr	r2, [pc, #108]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a7a:	f023 0301 	bic.w	r3, r3, #1
 8001a7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a82:	4b19      	ldr	r3, [pc, #100]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a88:	4a17      	ldr	r2, [pc, #92]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001a8a:	f023 0304 	bic.w	r3, r3, #4
 8001a8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d016      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a9a:	f7ff f801 	bl	8000aa0 <HAL_GetTick>
 8001a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aa0:	e00a      	b.n	8001ab8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001aa2:	f7fe fffd 	bl	8000aa0 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d901      	bls.n	8001ab8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8001ab4:	2303      	movs	r3, #3
 8001ab6:	e139      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ab8:	4b0b      	ldr	r3, [pc, #44]	; (8001ae8 <HAL_RCC_OscConfig+0x578>)
 8001aba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001abe:	f003 0302 	and.w	r3, r3, #2
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d0ed      	beq.n	8001aa2 <HAL_RCC_OscConfig+0x532>
 8001ac6:	e01a      	b.n	8001afe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ac8:	f7fe ffea 	bl	8000aa0 <HAL_GetTick>
 8001acc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ace:	e00f      	b.n	8001af0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad0:	f7fe ffe6 	bl	8000aa0 <HAL_GetTick>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	1ad3      	subs	r3, r2, r3
 8001ada:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d906      	bls.n	8001af0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ae2:	2303      	movs	r3, #3
 8001ae4:	e122      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
 8001ae6:	bf00      	nop
 8001ae8:	40021000 	.word	0x40021000
 8001aec:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001af0:	4b90      	ldr	r3, [pc, #576]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	f003 0302 	and.w	r3, r3, #2
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d1e8      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001afe:	7ffb      	ldrb	r3, [r7, #31]
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b04:	4b8b      	ldr	r3, [pc, #556]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	4a8a      	ldr	r2, [pc, #552]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001b0a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b0e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	f000 8108 	beq.w	8001d2a <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	f040 80d0 	bne.w	8001cc4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001b24:	4b83      	ldr	r3, [pc, #524]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	f003 0203 	and.w	r2, r3, #3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b34:	429a      	cmp	r2, r3
 8001b36:	d130      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b42:	3b01      	subs	r3, #1
 8001b44:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d127      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b4a:	697b      	ldr	r3, [r7, #20]
 8001b4c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001b54:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d11f      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001b64:	2a07      	cmp	r2, #7
 8001b66:	bf14      	ite	ne
 8001b68:	2201      	movne	r2, #1
 8001b6a:	2200      	moveq	r2, #0
 8001b6c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6e:	4293      	cmp	r3, r2
 8001b70:	d113      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b7c:	085b      	lsrs	r3, r3, #1
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001b82:	429a      	cmp	r2, r3
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b90:	085b      	lsrs	r3, r3, #1
 8001b92:	3b01      	subs	r3, #1
 8001b94:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001b96:	429a      	cmp	r2, r3
 8001b98:	d06e      	beq.n	8001c78 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b9a:	69bb      	ldr	r3, [r7, #24]
 8001b9c:	2b0c      	cmp	r3, #12
 8001b9e:	d069      	beq.n	8001c74 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ba0:	4b64      	ldr	r3, [pc, #400]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d105      	bne.n	8001bb8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001bac:	4b61      	ldr	r3, [pc, #388]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d001      	beq.n	8001bbc <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	e0b7      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001bbc:	4b5d      	ldr	r3, [pc, #372]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a5c      	ldr	r2, [pc, #368]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001bc2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001bc6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001bc8:	f7fe ff6a 	bl	8000aa0 <HAL_GetTick>
 8001bcc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bce:	e008      	b.n	8001be2 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bd0:	f7fe ff66 	bl	8000aa0 <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	693b      	ldr	r3, [r7, #16]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d901      	bls.n	8001be2 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8001bde:	2303      	movs	r3, #3
 8001be0:	e0a4      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001be2:	4b54      	ldr	r3, [pc, #336]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d1f0      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001bee:	4b51      	ldr	r3, [pc, #324]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001bf0:	68da      	ldr	r2, [r3, #12]
 8001bf2:	4b51      	ldr	r3, [pc, #324]	; (8001d38 <HAL_RCC_OscConfig+0x7c8>)
 8001bf4:	4013      	ands	r3, r2
 8001bf6:	687a      	ldr	r2, [r7, #4]
 8001bf8:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001bfa:	687a      	ldr	r2, [r7, #4]
 8001bfc:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001bfe:	3a01      	subs	r2, #1
 8001c00:	0112      	lsls	r2, r2, #4
 8001c02:	4311      	orrs	r1, r2
 8001c04:	687a      	ldr	r2, [r7, #4]
 8001c06:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001c08:	0212      	lsls	r2, r2, #8
 8001c0a:	4311      	orrs	r1, r2
 8001c0c:	687a      	ldr	r2, [r7, #4]
 8001c0e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001c10:	0852      	lsrs	r2, r2, #1
 8001c12:	3a01      	subs	r2, #1
 8001c14:	0552      	lsls	r2, r2, #21
 8001c16:	4311      	orrs	r1, r2
 8001c18:	687a      	ldr	r2, [r7, #4]
 8001c1a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001c1c:	0852      	lsrs	r2, r2, #1
 8001c1e:	3a01      	subs	r2, #1
 8001c20:	0652      	lsls	r2, r2, #25
 8001c22:	4311      	orrs	r1, r2
 8001c24:	687a      	ldr	r2, [r7, #4]
 8001c26:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001c28:	0912      	lsrs	r2, r2, #4
 8001c2a:	0452      	lsls	r2, r2, #17
 8001c2c:	430a      	orrs	r2, r1
 8001c2e:	4941      	ldr	r1, [pc, #260]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c30:	4313      	orrs	r3, r2
 8001c32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001c34:	4b3f      	ldr	r3, [pc, #252]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	4a3e      	ldr	r2, [pc, #248]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c40:	4b3c      	ldr	r3, [pc, #240]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	4a3b      	ldr	r2, [pc, #236]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c4c:	f7fe ff28 	bl	8000aa0 <HAL_GetTick>
 8001c50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c52:	e008      	b.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c54:	f7fe ff24 	bl	8000aa0 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	2b02      	cmp	r3, #2
 8001c60:	d901      	bls.n	8001c66 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8001c62:	2303      	movs	r3, #3
 8001c64:	e062      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c66:	4b33      	ldr	r3, [pc, #204]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d0f0      	beq.n	8001c54 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c72:	e05a      	b.n	8001d2a <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001c74:	2301      	movs	r3, #1
 8001c76:	e059      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c78:	4b2e      	ldr	r3, [pc, #184]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d152      	bne.n	8001d2a <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001c84:	4b2b      	ldr	r3, [pc, #172]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a2a      	ldr	r2, [pc, #168]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c8e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001c90:	4b28      	ldr	r3, [pc, #160]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	4a27      	ldr	r2, [pc, #156]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001c96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001c9a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c9c:	f7fe ff00 	bl	8000aa0 <HAL_GetTick>
 8001ca0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ca2:	e008      	b.n	8001cb6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ca4:	f7fe fefc 	bl	8000aa0 <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b02      	cmp	r3, #2
 8001cb0:	d901      	bls.n	8001cb6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8001cb2:	2303      	movs	r3, #3
 8001cb4:	e03a      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cb6:	4b1f      	ldr	r3, [pc, #124]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d0f0      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x734>
 8001cc2:	e032      	b.n	8001d2a <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cc4:	69bb      	ldr	r3, [r7, #24]
 8001cc6:	2b0c      	cmp	r3, #12
 8001cc8:	d02d      	beq.n	8001d26 <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cca:	4b1a      	ldr	r3, [pc, #104]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a19      	ldr	r2, [pc, #100]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001cd0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cd4:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001cd6:	4b17      	ldr	r3, [pc, #92]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d105      	bne.n	8001cee <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001ce2:	4b14      	ldr	r3, [pc, #80]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	4a13      	ldr	r2, [pc, #76]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001ce8:	f023 0303 	bic.w	r3, r3, #3
 8001cec:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001cee:	4b11      	ldr	r3, [pc, #68]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001cf0:	68db      	ldr	r3, [r3, #12]
 8001cf2:	4a10      	ldr	r2, [pc, #64]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001cf4:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001cf8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cfc:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fecf 	bl	8000aa0 <HAL_GetTick>
 8001d02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	e008      	b.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d06:	f7fe fecb 	bl	8000aa0 <HAL_GetTick>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	693b      	ldr	r3, [r7, #16]
 8001d0e:	1ad3      	subs	r3, r2, r3
 8001d10:	2b02      	cmp	r3, #2
 8001d12:	d901      	bls.n	8001d18 <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e009      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <HAL_RCC_OscConfig+0x7c4>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d1f0      	bne.n	8001d06 <HAL_RCC_OscConfig+0x796>
 8001d24:	e001      	b.n	8001d2a <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e000      	b.n	8001d2c <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8001d2a:	2300      	movs	r3, #0
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3720      	adds	r7, #32
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	40021000 	.word	0x40021000
 8001d38:	f99d808c 	.word	0xf99d808c

08001d3c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	6078      	str	r0, [r7, #4]
 8001d44:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d101      	bne.n	8001d50 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	e0c8      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d50:	4b66      	ldr	r3, [pc, #408]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	f003 0307 	and.w	r3, r3, #7
 8001d58:	683a      	ldr	r2, [r7, #0]
 8001d5a:	429a      	cmp	r2, r3
 8001d5c:	d910      	bls.n	8001d80 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d5e:	4b63      	ldr	r3, [pc, #396]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	f023 0207 	bic.w	r2, r3, #7
 8001d66:	4961      	ldr	r1, [pc, #388]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d6e:	4b5f      	ldr	r3, [pc, #380]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f003 0307 	and.w	r3, r3, #7
 8001d76:	683a      	ldr	r2, [r7, #0]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d001      	beq.n	8001d80 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e0b0      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 0301 	and.w	r3, r3, #1
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d04c      	beq.n	8001e26 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	2b03      	cmp	r3, #3
 8001d92:	d107      	bne.n	8001da4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d94:	4b56      	ldr	r3, [pc, #344]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d121      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001da0:	2301      	movs	r3, #1
 8001da2:	e09e      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	2b02      	cmp	r3, #2
 8001daa:	d107      	bne.n	8001dbc <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dac:	4b50      	ldr	r3, [pc, #320]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d115      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001db8:	2301      	movs	r3, #1
 8001dba:	e092      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	685b      	ldr	r3, [r3, #4]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d107      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001dc4:	4b4a      	ldr	r3, [pc, #296]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d109      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e086      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b46      	ldr	r3, [pc, #280]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e07e      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001de4:	4b42      	ldr	r3, [pc, #264]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f023 0203 	bic.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	493f      	ldr	r1, [pc, #252]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001df2:	4313      	orrs	r3, r2
 8001df4:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001df6:	f7fe fe53 	bl	8000aa0 <HAL_GetTick>
 8001dfa:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dfc:	e00a      	b.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dfe:	f7fe fe4f 	bl	8000aa0 <HAL_GetTick>
 8001e02:	4602      	mov	r2, r0
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e066      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 020c 	and.w	r2, r3, #12
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	009b      	lsls	r3, r3, #2
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d1eb      	bne.n	8001dfe <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 0302 	and.w	r3, r3, #2
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e32:	4b2f      	ldr	r3, [pc, #188]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	492c      	ldr	r1, [pc, #176]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e40:	4313      	orrs	r3, r2
 8001e42:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001e44:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0307 	and.w	r3, r3, #7
 8001e4c:	683a      	ldr	r2, [r7, #0]
 8001e4e:	429a      	cmp	r2, r3
 8001e50:	d210      	bcs.n	8001e74 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f023 0207 	bic.w	r2, r3, #7
 8001e5a:	4924      	ldr	r1, [pc, #144]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	4313      	orrs	r3, r2
 8001e60:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e62:	4b22      	ldr	r3, [pc, #136]	; (8001eec <HAL_RCC_ClockConfig+0x1b0>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0307 	and.w	r3, r3, #7
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	429a      	cmp	r2, r3
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001e70:	2301      	movs	r3, #1
 8001e72:	e036      	b.n	8001ee2 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f003 0304 	and.w	r3, r3, #4
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d008      	beq.n	8001e92 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e80:	4b1b      	ldr	r3, [pc, #108]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	68db      	ldr	r3, [r3, #12]
 8001e8c:	4918      	ldr	r1, [pc, #96]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001e8e:	4313      	orrs	r3, r2
 8001e90:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0308 	and.w	r3, r3, #8
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d009      	beq.n	8001eb2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e9e:	4b14      	ldr	r3, [pc, #80]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	691b      	ldr	r3, [r3, #16]
 8001eaa:	00db      	lsls	r3, r3, #3
 8001eac:	4910      	ldr	r1, [pc, #64]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001eb2:	f000 f825 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	4b0d      	ldr	r3, [pc, #52]	; (8001ef0 <HAL_RCC_ClockConfig+0x1b4>)
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	091b      	lsrs	r3, r3, #4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	490c      	ldr	r1, [pc, #48]	; (8001ef4 <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	5ccb      	ldrb	r3, [r1, r3]
 8001ec6:	f003 031f 	and.w	r3, r3, #31
 8001eca:	fa22 f303 	lsr.w	r3, r2, r3
 8001ece:	4a0a      	ldr	r2, [pc, #40]	; (8001ef8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ed2:	4b0a      	ldr	r3, [pc, #40]	; (8001efc <HAL_RCC_ClockConfig+0x1c0>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe fd92 	bl	8000a00 <HAL_InitTick>
 8001edc:	4603      	mov	r3, r0
 8001ede:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ee0:	7afb      	ldrb	r3, [r7, #11]
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3710      	adds	r7, #16
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08003b9c 	.word	0x08003b9c
 8001ef8:	20000000 	.word	0x20000000
 8001efc:	20000004 	.word	0x20000004

08001f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b089      	sub	sp, #36	; 0x24
 8001f04:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001f06:	2300      	movs	r3, #0
 8001f08:	61fb      	str	r3, [r7, #28]
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f0e:	4b3e      	ldr	r3, [pc, #248]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	f003 030c 	and.w	r3, r3, #12
 8001f16:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001f18:	4b3b      	ldr	r3, [pc, #236]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f1a:	68db      	ldr	r3, [r3, #12]
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f22:	693b      	ldr	r3, [r7, #16]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_GetSysClockFreq+0x34>
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	2b0c      	cmp	r3, #12
 8001f2c:	d121      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d11e      	bne.n	8001f72 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001f34:	4b34      	ldr	r3, [pc, #208]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f003 0308 	and.w	r3, r3, #8
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d107      	bne.n	8001f50 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001f40:	4b31      	ldr	r3, [pc, #196]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f46:	0a1b      	lsrs	r3, r3, #8
 8001f48:	f003 030f 	and.w	r3, r3, #15
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	e005      	b.n	8001f5c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001f50:	4b2d      	ldr	r3, [pc, #180]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 030f 	and.w	r3, r3, #15
 8001f5a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001f5c:	4a2b      	ldr	r2, [pc, #172]	; (800200c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001f5e:	69fb      	ldr	r3, [r7, #28]
 8001f60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f64:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f66:	693b      	ldr	r3, [r7, #16]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10d      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001f70:	e00a      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001f72:	693b      	ldr	r3, [r7, #16]
 8001f74:	2b04      	cmp	r3, #4
 8001f76:	d102      	bne.n	8001f7e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001f78:	4b25      	ldr	r3, [pc, #148]	; (8002010 <HAL_RCC_GetSysClockFreq+0x110>)
 8001f7a:	61bb      	str	r3, [r7, #24]
 8001f7c:	e004      	b.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	2b08      	cmp	r3, #8
 8001f82:	d101      	bne.n	8001f88 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f84:	4b23      	ldr	r3, [pc, #140]	; (8002014 <HAL_RCC_GetSysClockFreq+0x114>)
 8001f86:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	2b0c      	cmp	r3, #12
 8001f8c:	d134      	bne.n	8001ff8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001f8e:	4b1e      	ldr	r3, [pc, #120]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f90:	68db      	ldr	r3, [r3, #12]
 8001f92:	f003 0303 	and.w	r3, r3, #3
 8001f96:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001f98:	68bb      	ldr	r3, [r7, #8]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	2b03      	cmp	r3, #3
 8001fa2:	d003      	beq.n	8001fac <HAL_RCC_GetSysClockFreq+0xac>
 8001fa4:	e005      	b.n	8001fb2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001fa6:	4b1a      	ldr	r3, [pc, #104]	; (8002010 <HAL_RCC_GetSysClockFreq+0x110>)
 8001fa8:	617b      	str	r3, [r7, #20]
      break;
 8001faa:	e005      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001fac:	4b19      	ldr	r3, [pc, #100]	; (8002014 <HAL_RCC_GetSysClockFreq+0x114>)
 8001fae:	617b      	str	r3, [r7, #20]
      break;
 8001fb0:	e002      	b.n	8001fb8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	617b      	str	r3, [r7, #20]
      break;
 8001fb6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001fb8:	4b13      	ldr	r3, [pc, #76]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	091b      	lsrs	r3, r3, #4
 8001fbe:	f003 0307 	and.w	r3, r3, #7
 8001fc2:	3301      	adds	r3, #1
 8001fc4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001fc6:	4b10      	ldr	r3, [pc, #64]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	0a1b      	lsrs	r3, r3, #8
 8001fcc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001fd0:	697a      	ldr	r2, [r7, #20]
 8001fd2:	fb02 f203 	mul.w	r2, r2, r3
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fdc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001fde:	4b0a      	ldr	r3, [pc, #40]	; (8002008 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	0e5b      	lsrs	r3, r3, #25
 8001fe4:	f003 0303 	and.w	r3, r3, #3
 8001fe8:	3301      	adds	r3, #1
 8001fea:	005b      	lsls	r3, r3, #1
 8001fec:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001fee:	697a      	ldr	r2, [r7, #20]
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ff6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001ff8:	69bb      	ldr	r3, [r7, #24]
}
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	3724      	adds	r7, #36	; 0x24
 8001ffe:	46bd      	mov	sp, r7
 8002000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002004:	4770      	bx	lr
 8002006:	bf00      	nop
 8002008:	40021000 	.word	0x40021000
 800200c:	08003bb4 	.word	0x08003bb4
 8002010:	00f42400 	.word	0x00f42400
 8002014:	007a1200 	.word	0x007a1200

08002018 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002018:	b480      	push	{r7}
 800201a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800201c:	4b03      	ldr	r3, [pc, #12]	; (800202c <HAL_RCC_GetHCLKFreq+0x14>)
 800201e:	681b      	ldr	r3, [r3, #0]
}
 8002020:	4618      	mov	r0, r3
 8002022:	46bd      	mov	sp, r7
 8002024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002028:	4770      	bx	lr
 800202a:	bf00      	nop
 800202c:	20000000 	.word	0x20000000

08002030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002034:	f7ff fff0 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002038:	4602      	mov	r2, r0
 800203a:	4b06      	ldr	r3, [pc, #24]	; (8002054 <HAL_RCC_GetPCLK1Freq+0x24>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	0a1b      	lsrs	r3, r3, #8
 8002040:	f003 0307 	and.w	r3, r3, #7
 8002044:	4904      	ldr	r1, [pc, #16]	; (8002058 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002046:	5ccb      	ldrb	r3, [r1, r3]
 8002048:	f003 031f 	and.w	r3, r3, #31
 800204c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002050:	4618      	mov	r0, r3
 8002052:	bd80      	pop	{r7, pc}
 8002054:	40021000 	.word	0x40021000
 8002058:	08003bac 	.word	0x08003bac

0800205c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002060:	f7ff ffda 	bl	8002018 <HAL_RCC_GetHCLKFreq>
 8002064:	4602      	mov	r2, r0
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002068:	689b      	ldr	r3, [r3, #8]
 800206a:	0adb      	lsrs	r3, r3, #11
 800206c:	f003 0307 	and.w	r3, r3, #7
 8002070:	4904      	ldr	r1, [pc, #16]	; (8002084 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002072:	5ccb      	ldrb	r3, [r1, r3]
 8002074:	f003 031f 	and.w	r3, r3, #31
 8002078:	fa22 f303 	lsr.w	r3, r2, r3
}
 800207c:	4618      	mov	r0, r3
 800207e:	bd80      	pop	{r7, pc}
 8002080:	40021000 	.word	0x40021000
 8002084:	08003bac 	.word	0x08003bac

08002088 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b086      	sub	sp, #24
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002094:	4b2a      	ldr	r3, [pc, #168]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002098:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d003      	beq.n	80020a8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80020a0:	f7ff fa02 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80020a4:	6178      	str	r0, [r7, #20]
 80020a6:	e014      	b.n	80020d2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80020a8:	4b25      	ldr	r3, [pc, #148]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ac:	4a24      	ldr	r2, [pc, #144]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020b2:	6593      	str	r3, [r2, #88]	; 0x58
 80020b4:	4b22      	ldr	r3, [pc, #136]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020bc:	60fb      	str	r3, [r7, #12]
 80020be:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80020c0:	f7ff f9f2 	bl	80014a8 <HAL_PWREx_GetVoltageRange>
 80020c4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80020c6:	4b1e      	ldr	r3, [pc, #120]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ca:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80020cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020d0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80020d8:	d10b      	bne.n	80020f2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	2b80      	cmp	r3, #128	; 0x80
 80020de:	d919      	bls.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2ba0      	cmp	r3, #160	; 0xa0
 80020e4:	d902      	bls.n	80020ec <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80020e6:	2302      	movs	r3, #2
 80020e8:	613b      	str	r3, [r7, #16]
 80020ea:	e013      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80020ec:	2301      	movs	r3, #1
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e010      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	2b80      	cmp	r3, #128	; 0x80
 80020f6:	d902      	bls.n	80020fe <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80020f8:	2303      	movs	r3, #3
 80020fa:	613b      	str	r3, [r7, #16]
 80020fc:	e00a      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2b80      	cmp	r3, #128	; 0x80
 8002102:	d102      	bne.n	800210a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002104:	2302      	movs	r3, #2
 8002106:	613b      	str	r3, [r7, #16]
 8002108:	e004      	b.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b70      	cmp	r3, #112	; 0x70
 800210e:	d101      	bne.n	8002114 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002110:	2301      	movs	r3, #1
 8002112:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002114:	4b0b      	ldr	r3, [pc, #44]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f023 0207 	bic.w	r2, r3, #7
 800211c:	4909      	ldr	r1, [pc, #36]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	4313      	orrs	r3, r2
 8002122:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002124:	4b07      	ldr	r3, [pc, #28]	; (8002144 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	f003 0307 	and.w	r3, r3, #7
 800212c:	693a      	ldr	r2, [r7, #16]
 800212e:	429a      	cmp	r2, r3
 8002130:	d001      	beq.n	8002136 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e000      	b.n	8002138 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002150:	2300      	movs	r3, #0
 8002152:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002154:	2300      	movs	r3, #0
 8002156:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002160:	2b00      	cmp	r3, #0
 8002162:	d041      	beq.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002168:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800216c:	d02a      	beq.n	80021c4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800216e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002172:	d824      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002174:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002178:	d008      	beq.n	800218c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800217a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800217e:	d81e      	bhi.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
 8002180:	2b00      	cmp	r3, #0
 8002182:	d00a      	beq.n	800219a <HAL_RCCEx_PeriphCLKConfig+0x52>
 8002184:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002188:	d010      	beq.n	80021ac <HAL_RCCEx_PeriphCLKConfig+0x64>
 800218a:	e018      	b.n	80021be <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800218c:	4b86      	ldr	r3, [pc, #536]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800218e:	68db      	ldr	r3, [r3, #12]
 8002190:	4a85      	ldr	r2, [pc, #532]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002192:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002196:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002198:	e015      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	3304      	adds	r3, #4
 800219e:	2100      	movs	r1, #0
 80021a0:	4618      	mov	r0, r3
 80021a2:	f000 fabb 	bl	800271c <RCCEx_PLLSAI1_Config>
 80021a6:	4603      	mov	r3, r0
 80021a8:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021aa:	e00c      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	3320      	adds	r3, #32
 80021b0:	2100      	movs	r1, #0
 80021b2:	4618      	mov	r0, r3
 80021b4:	f000 fba6 	bl	8002904 <RCCEx_PLLSAI2_Config>
 80021b8:	4603      	mov	r3, r0
 80021ba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80021bc:	e003      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80021be:	2301      	movs	r3, #1
 80021c0:	74fb      	strb	r3, [r7, #19]
      break;
 80021c2:	e000      	b.n	80021c6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 80021c4:	bf00      	nop
    }

    if(ret == HAL_OK)
 80021c6:	7cfb      	ldrb	r3, [r7, #19]
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10b      	bne.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80021cc:	4b76      	ldr	r3, [pc, #472]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021da:	4973      	ldr	r1, [pc, #460]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80021dc:	4313      	orrs	r3, r2
 80021de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80021e2:	e001      	b.n	80021e8 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021e4:	7cfb      	ldrb	r3, [r7, #19]
 80021e6:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d041      	beq.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80021f8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80021fc:	d02a      	beq.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80021fe:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002202:	d824      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002204:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002208:	d008      	beq.n	800221c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800220a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800220e:	d81e      	bhi.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8002214:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002218:	d010      	beq.n	800223c <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800221a:	e018      	b.n	800224e <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 800221c:	4b62      	ldr	r3, [pc, #392]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	4a61      	ldr	r2, [pc, #388]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002222:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002226:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002228:	e015      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	3304      	adds	r3, #4
 800222e:	2100      	movs	r1, #0
 8002230:	4618      	mov	r0, r3
 8002232:	f000 fa73 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002236:	4603      	mov	r3, r0
 8002238:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800223a:	e00c      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	3320      	adds	r3, #32
 8002240:	2100      	movs	r1, #0
 8002242:	4618      	mov	r0, r3
 8002244:	f000 fb5e 	bl	8002904 <RCCEx_PLLSAI2_Config>
 8002248:	4603      	mov	r3, r0
 800224a:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800224c:	e003      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800224e:	2301      	movs	r3, #1
 8002250:	74fb      	strb	r3, [r7, #19]
      break;
 8002252:	e000      	b.n	8002256 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8002254:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002256:	7cfb      	ldrb	r3, [r7, #19]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10b      	bne.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800225c:	4b52      	ldr	r3, [pc, #328]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800225e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002262:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800226a:	494f      	ldr	r1, [pc, #316]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800226c:	4313      	orrs	r3, r2
 800226e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002272:	e001      	b.n	8002278 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002280:	2b00      	cmp	r3, #0
 8002282:	f000 80a0 	beq.w	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002286:	2300      	movs	r3, #0
 8002288:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800228a:	4b47      	ldr	r3, [pc, #284]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800228c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800228e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002292:	2b00      	cmp	r3, #0
 8002294:	d101      	bne.n	800229a <HAL_RCCEx_PeriphCLKConfig+0x152>
 8002296:	2301      	movs	r3, #1
 8002298:	e000      	b.n	800229c <HAL_RCCEx_PeriphCLKConfig+0x154>
 800229a:	2300      	movs	r3, #0
 800229c:	2b00      	cmp	r3, #0
 800229e:	d00d      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022a0:	4b41      	ldr	r3, [pc, #260]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022a4:	4a40      	ldr	r2, [pc, #256]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022aa:	6593      	str	r3, [r2, #88]	; 0x58
 80022ac:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b4:	60bb      	str	r3, [r7, #8]
 80022b6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022b8:	2301      	movs	r3, #1
 80022ba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80022bc:	4b3b      	ldr	r3, [pc, #236]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	4a3a      	ldr	r2, [pc, #232]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022c6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80022c8:	f7fe fbea 	bl	8000aa0 <HAL_GetTick>
 80022cc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022ce:	e009      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022d0:	f7fe fbe6 	bl	8000aa0 <HAL_GetTick>
 80022d4:	4602      	mov	r2, r0
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	1ad3      	subs	r3, r2, r3
 80022da:	2b02      	cmp	r3, #2
 80022dc:	d902      	bls.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80022de:	2303      	movs	r3, #3
 80022e0:	74fb      	strb	r3, [r7, #19]
        break;
 80022e2:	e005      	b.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80022e4:	4b31      	ldr	r3, [pc, #196]	; (80023ac <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d0ef      	beq.n	80022d0 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80022f0:	7cfb      	ldrb	r3, [r7, #19]
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d15c      	bne.n	80023b0 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80022f6:	4b2c      	ldr	r3, [pc, #176]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80022f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022fc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002300:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002302:	697b      	ldr	r3, [r7, #20]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d01f      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230e:	697a      	ldr	r2, [r7, #20]
 8002310:	429a      	cmp	r2, r3
 8002312:	d019      	beq.n	8002348 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002314:	4b24      	ldr	r3, [pc, #144]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002316:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800231a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800231e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002320:	4b21      	ldr	r3, [pc, #132]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002326:	4a20      	ldr	r2, [pc, #128]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800232c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002330:	4b1d      	ldr	r3, [pc, #116]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002332:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002336:	4a1c      	ldr	r2, [pc, #112]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002338:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800233c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002340:	4a19      	ldr	r2, [pc, #100]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	f003 0301 	and.w	r3, r3, #1
 800234e:	2b00      	cmp	r3, #0
 8002350:	d016      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002352:	f7fe fba5 	bl	8000aa0 <HAL_GetTick>
 8002356:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002358:	e00b      	b.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800235a:	f7fe fba1 	bl	8000aa0 <HAL_GetTick>
 800235e:	4602      	mov	r2, r0
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	1ad3      	subs	r3, r2, r3
 8002364:	f241 3288 	movw	r2, #5000	; 0x1388
 8002368:	4293      	cmp	r3, r2
 800236a:	d902      	bls.n	8002372 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 800236c:	2303      	movs	r3, #3
 800236e:	74fb      	strb	r3, [r7, #19]
            break;
 8002370:	e006      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002372:	4b0d      	ldr	r3, [pc, #52]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002374:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002378:	f003 0302 	and.w	r3, r3, #2
 800237c:	2b00      	cmp	r3, #0
 800237e:	d0ec      	beq.n	800235a <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 8002380:	7cfb      	ldrb	r3, [r7, #19]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d10c      	bne.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002386:	4b08      	ldr	r3, [pc, #32]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002396:	4904      	ldr	r1, [pc, #16]	; (80023a8 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8002398:	4313      	orrs	r3, r2
 800239a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800239e:	e009      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80023a0:	7cfb      	ldrb	r3, [r7, #19]
 80023a2:	74bb      	strb	r3, [r7, #18]
 80023a4:	e006      	b.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80023a6:	bf00      	nop
 80023a8:	40021000 	.word	0x40021000
 80023ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023b4:	7c7b      	ldrb	r3, [r7, #17]
 80023b6:	2b01      	cmp	r3, #1
 80023b8:	d105      	bne.n	80023c6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ba:	4b9e      	ldr	r3, [pc, #632]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023be:	4a9d      	ldr	r2, [pc, #628]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d00a      	beq.n	80023e8 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80023d2:	4b98      	ldr	r3, [pc, #608]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023d8:	f023 0203 	bic.w	r2, r3, #3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023e0:	4994      	ldr	r1, [pc, #592]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 0302 	and.w	r3, r3, #2
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d00a      	beq.n	800240a <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80023f4:	4b8f      	ldr	r3, [pc, #572]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f023 020c 	bic.w	r2, r3, #12
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002402:	498c      	ldr	r1, [pc, #560]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002404:	4313      	orrs	r3, r2
 8002406:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0304 	and.w	r3, r3, #4
 8002412:	2b00      	cmp	r3, #0
 8002414:	d00a      	beq.n	800242c <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002416:	4b87      	ldr	r3, [pc, #540]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002418:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800241c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4983      	ldr	r1, [pc, #524]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002426:	4313      	orrs	r3, r2
 8002428:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 0308 	and.w	r3, r3, #8
 8002434:	2b00      	cmp	r3, #0
 8002436:	d00a      	beq.n	800244e <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002438:	4b7e      	ldr	r3, [pc, #504]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800243a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800243e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002446:	497b      	ldr	r1, [pc, #492]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002448:	4313      	orrs	r3, r2
 800244a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	f003 0310 	and.w	r3, r3, #16
 8002456:	2b00      	cmp	r3, #0
 8002458:	d00a      	beq.n	8002470 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800245a:	4b76      	ldr	r3, [pc, #472]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800245c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002460:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002468:	4972      	ldr	r1, [pc, #456]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800246a:	4313      	orrs	r3, r2
 800246c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d00a      	beq.n	8002492 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800247c:	4b6d      	ldr	r3, [pc, #436]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800247e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002482:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248a:	496a      	ldr	r1, [pc, #424]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800248c:	4313      	orrs	r3, r2
 800248e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800249a:	2b00      	cmp	r3, #0
 800249c:	d00a      	beq.n	80024b4 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800249e:	4b65      	ldr	r3, [pc, #404]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024a4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024ac:	4961      	ldr	r1, [pc, #388]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d00a      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024c0:	4b5c      	ldr	r3, [pc, #368]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024c6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80024ce:	4959      	ldr	r1, [pc, #356]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024d0:	4313      	orrs	r3, r2
 80024d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d00a      	beq.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024e2:	4b54      	ldr	r3, [pc, #336]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024e8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80024f0:	4950      	ldr	r1, [pc, #320]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002500:	2b00      	cmp	r3, #0
 8002502:	d00a      	beq.n	800251a <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002504:	4b4b      	ldr	r3, [pc, #300]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800250a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002512:	4948      	ldr	r1, [pc, #288]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002514:	4313      	orrs	r3, r2
 8002516:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00a      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002526:	4b43      	ldr	r3, [pc, #268]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002528:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800252c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002534:	493f      	ldr	r1, [pc, #252]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d028      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002548:	4b3a      	ldr	r3, [pc, #232]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800254a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002556:	4937      	ldr	r1, [pc, #220]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002558:	4313      	orrs	r3, r2
 800255a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002562:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002566:	d106      	bne.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002568:	4b32      	ldr	r3, [pc, #200]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	4a31      	ldr	r2, [pc, #196]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800256e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002572:	60d3      	str	r3, [r2, #12]
 8002574:	e011      	b.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800257a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800257e:	d10c      	bne.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	3304      	adds	r3, #4
 8002584:	2101      	movs	r1, #1
 8002586:	4618      	mov	r0, r3
 8002588:	f000 f8c8 	bl	800271c <RCCEx_PLLSAI1_Config>
 800258c:	4603      	mov	r3, r0
 800258e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002590:	7cfb      	ldrb	r3, [r7, #19]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8002596:	7cfb      	ldrb	r3, [r7, #19]
 8002598:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d028      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80025a6:	4b23      	ldr	r3, [pc, #140]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025ac:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025b4:	491f      	ldr	r1, [pc, #124]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025c4:	d106      	bne.n	80025d4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025c8:	68db      	ldr	r3, [r3, #12]
 80025ca:	4a1a      	ldr	r2, [pc, #104]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80025cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025d0:	60d3      	str	r3, [r2, #12]
 80025d2:	e011      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025d8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	3304      	adds	r3, #4
 80025e2:	2101      	movs	r1, #1
 80025e4:	4618      	mov	r0, r3
 80025e6:	f000 f899 	bl	800271c <RCCEx_PLLSAI1_Config>
 80025ea:	4603      	mov	r3, r0
 80025ec:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025ee:	7cfb      	ldrb	r3, [r7, #19]
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d001      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80025f4:	7cfb      	ldrb	r3, [r7, #19]
 80025f6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002600:	2b00      	cmp	r3, #0
 8002602:	d02b      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002604:	4b0b      	ldr	r3, [pc, #44]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	4908      	ldr	r1, [pc, #32]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002622:	d109      	bne.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002624:	4b03      	ldr	r3, [pc, #12]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	4a02      	ldr	r2, [pc, #8]	; (8002634 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800262a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800262e:	60d3      	str	r3, [r2, #12]
 8002630:	e014      	b.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
 8002632:	bf00      	nop
 8002634:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800263c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002640:	d10c      	bne.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	3304      	adds	r3, #4
 8002646:	2101      	movs	r1, #1
 8002648:	4618      	mov	r0, r3
 800264a:	f000 f867 	bl	800271c <RCCEx_PLLSAI1_Config>
 800264e:	4603      	mov	r3, r0
 8002650:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002652:	7cfb      	ldrb	r3, [r7, #19]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d001      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8002658:	7cfb      	ldrb	r3, [r7, #19]
 800265a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d02f      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002668:	4b2b      	ldr	r3, [pc, #172]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800266a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800266e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002676:	4928      	ldr	r1, [pc, #160]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002682:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002686:	d10d      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	3304      	adds	r3, #4
 800268c:	2102      	movs	r1, #2
 800268e:	4618      	mov	r0, r3
 8002690:	f000 f844 	bl	800271c <RCCEx_PLLSAI1_Config>
 8002694:	4603      	mov	r3, r0
 8002696:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002698:	7cfb      	ldrb	r3, [r7, #19]
 800269a:	2b00      	cmp	r3, #0
 800269c:	d014      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800269e:	7cfb      	ldrb	r3, [r7, #19]
 80026a0:	74bb      	strb	r3, [r7, #18]
 80026a2:	e011      	b.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80026a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80026ac:	d10c      	bne.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	3320      	adds	r3, #32
 80026b2:	2102      	movs	r1, #2
 80026b4:	4618      	mov	r0, r3
 80026b6:	f000 f925 	bl	8002904 <RCCEx_PLLSAI2_Config>
 80026ba:	4603      	mov	r3, r0
 80026bc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80026be:	7cfb      	ldrb	r3, [r7, #19]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d001      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80026c4:	7cfb      	ldrb	r3, [r7, #19]
 80026c6:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d00a      	beq.n	80026ea <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80026d4:	4b10      	ldr	r3, [pc, #64]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026da:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026e2:	490d      	ldr	r1, [pc, #52]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026e4:	4313      	orrs	r3, r2
 80026e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d00b      	beq.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80026f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026fc:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002706:	4904      	ldr	r1, [pc, #16]	; (8002718 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8002708:	4313      	orrs	r3, r2
 800270a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800270e:	7cbb      	ldrb	r3, [r7, #18]
}
 8002710:	4618      	mov	r0, r3
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40021000 	.word	0x40021000

0800271c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b084      	sub	sp, #16
 8002720:	af00      	add	r7, sp, #0
 8002722:	6078      	str	r0, [r7, #4]
 8002724:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002726:	2300      	movs	r3, #0
 8002728:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800272a:	4b75      	ldr	r3, [pc, #468]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800272c:	68db      	ldr	r3, [r3, #12]
 800272e:	f003 0303 	and.w	r3, r3, #3
 8002732:	2b00      	cmp	r3, #0
 8002734:	d018      	beq.n	8002768 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002736:	4b72      	ldr	r3, [pc, #456]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002738:	68db      	ldr	r3, [r3, #12]
 800273a:	f003 0203 	and.w	r2, r3, #3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	429a      	cmp	r2, r3
 8002744:	d10d      	bne.n	8002762 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
       ||
 800274a:	2b00      	cmp	r3, #0
 800274c:	d009      	beq.n	8002762 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800274e:	4b6c      	ldr	r3, [pc, #432]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002750:	68db      	ldr	r3, [r3, #12]
 8002752:	091b      	lsrs	r3, r3, #4
 8002754:	f003 0307 	and.w	r3, r3, #7
 8002758:	1c5a      	adds	r2, r3, #1
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
       ||
 800275e:	429a      	cmp	r2, r3
 8002760:	d047      	beq.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002762:	2301      	movs	r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
 8002766:	e044      	b.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	2b03      	cmp	r3, #3
 800276e:	d018      	beq.n	80027a2 <RCCEx_PLLSAI1_Config+0x86>
 8002770:	2b03      	cmp	r3, #3
 8002772:	d825      	bhi.n	80027c0 <RCCEx_PLLSAI1_Config+0xa4>
 8002774:	2b01      	cmp	r3, #1
 8002776:	d002      	beq.n	800277e <RCCEx_PLLSAI1_Config+0x62>
 8002778:	2b02      	cmp	r3, #2
 800277a:	d009      	beq.n	8002790 <RCCEx_PLLSAI1_Config+0x74>
 800277c:	e020      	b.n	80027c0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800277e:	4b60      	ldr	r3, [pc, #384]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d11d      	bne.n	80027c6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800278a:	2301      	movs	r3, #1
 800278c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800278e:	e01a      	b.n	80027c6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002790:	4b5b      	ldr	r3, [pc, #364]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002798:	2b00      	cmp	r3, #0
 800279a:	d116      	bne.n	80027ca <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80027a0:	e013      	b.n	80027ca <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80027a2:	4b57      	ldr	r3, [pc, #348]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10f      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80027ae:	4b54      	ldr	r3, [pc, #336]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d109      	bne.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80027be:	e006      	b.n	80027ce <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80027c0:	2301      	movs	r3, #1
 80027c2:	73fb      	strb	r3, [r7, #15]
      break;
 80027c4:	e004      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027c6:	bf00      	nop
 80027c8:	e002      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ca:	bf00      	nop
 80027cc:	e000      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80027ce:	bf00      	nop
    }

    if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10d      	bne.n	80027f2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80027d6:	4b4a      	ldr	r3, [pc, #296]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6819      	ldr	r1, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	685b      	ldr	r3, [r3, #4]
 80027e6:	3b01      	subs	r3, #1
 80027e8:	011b      	lsls	r3, r3, #4
 80027ea:	430b      	orrs	r3, r1
 80027ec:	4944      	ldr	r1, [pc, #272]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027ee:	4313      	orrs	r3, r2
 80027f0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80027f2:	7bfb      	ldrb	r3, [r7, #15]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d17d      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80027f8:	4b41      	ldr	r3, [pc, #260]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a40      	ldr	r2, [pc, #256]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80027fe:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe f94c 	bl	8000aa0 <HAL_GetTick>
 8002808:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800280a:	e009      	b.n	8002820 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800280c:	f7fe f948 	bl	8000aa0 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68bb      	ldr	r3, [r7, #8]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d902      	bls.n	8002820 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	73fb      	strb	r3, [r7, #15]
        break;
 800281e:	e005      	b.n	800282c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002820:	4b37      	ldr	r3, [pc, #220]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d1ef      	bne.n	800280c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800282c:	7bfb      	ldrb	r3, [r7, #15]
 800282e:	2b00      	cmp	r3, #0
 8002830:	d160      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	2b00      	cmp	r3, #0
 8002836:	d111      	bne.n	800285c <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002840:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002844:	687a      	ldr	r2, [r7, #4]
 8002846:	6892      	ldr	r2, [r2, #8]
 8002848:	0211      	lsls	r1, r2, #8
 800284a:	687a      	ldr	r2, [r7, #4]
 800284c:	68d2      	ldr	r2, [r2, #12]
 800284e:	0912      	lsrs	r2, r2, #4
 8002850:	0452      	lsls	r2, r2, #17
 8002852:	430a      	orrs	r2, r1
 8002854:	492a      	ldr	r1, [pc, #168]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002856:	4313      	orrs	r3, r2
 8002858:	610b      	str	r3, [r1, #16]
 800285a:	e027      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	2b01      	cmp	r3, #1
 8002860:	d112      	bne.n	8002888 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002862:	4b27      	ldr	r3, [pc, #156]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002864:	691b      	ldr	r3, [r3, #16]
 8002866:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800286a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800286e:	687a      	ldr	r2, [r7, #4]
 8002870:	6892      	ldr	r2, [r2, #8]
 8002872:	0211      	lsls	r1, r2, #8
 8002874:	687a      	ldr	r2, [r7, #4]
 8002876:	6912      	ldr	r2, [r2, #16]
 8002878:	0852      	lsrs	r2, r2, #1
 800287a:	3a01      	subs	r2, #1
 800287c:	0552      	lsls	r2, r2, #21
 800287e:	430a      	orrs	r2, r1
 8002880:	491f      	ldr	r1, [pc, #124]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002882:	4313      	orrs	r3, r2
 8002884:	610b      	str	r3, [r1, #16]
 8002886:	e011      	b.n	80028ac <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002888:	4b1d      	ldr	r3, [pc, #116]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 800288a:	691b      	ldr	r3, [r3, #16]
 800288c:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002890:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	6892      	ldr	r2, [r2, #8]
 8002898:	0211      	lsls	r1, r2, #8
 800289a:	687a      	ldr	r2, [r7, #4]
 800289c:	6952      	ldr	r2, [r2, #20]
 800289e:	0852      	lsrs	r2, r2, #1
 80028a0:	3a01      	subs	r2, #1
 80028a2:	0652      	lsls	r2, r2, #25
 80028a4:	430a      	orrs	r2, r1
 80028a6:	4916      	ldr	r1, [pc, #88]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028a8:	4313      	orrs	r3, r2
 80028aa:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80028ac:	4b14      	ldr	r3, [pc, #80]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a13      	ldr	r2, [pc, #76]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80028b6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028b8:	f7fe f8f2 	bl	8000aa0 <HAL_GetTick>
 80028bc:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028be:	e009      	b.n	80028d4 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80028c0:	f7fe f8ee 	bl	8000aa0 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b02      	cmp	r3, #2
 80028cc:	d902      	bls.n	80028d4 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	73fb      	strb	r3, [r7, #15]
          break;
 80028d2:	e005      	b.n	80028e0 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80028d4:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d0ef      	beq.n	80028c0 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80028e0:	7bfb      	ldrb	r3, [r7, #15]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d106      	bne.n	80028f4 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80028e6:	4b06      	ldr	r3, [pc, #24]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028e8:	691a      	ldr	r2, [r3, #16]
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	699b      	ldr	r3, [r3, #24]
 80028ee:	4904      	ldr	r1, [pc, #16]	; (8002900 <RCCEx_PLLSAI1_Config+0x1e4>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80028f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3710      	adds	r7, #16
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}
 80028fe:	bf00      	nop
 8002900:	40021000 	.word	0x40021000

08002904 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	b084      	sub	sp, #16
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
 800290c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800290e:	2300      	movs	r3, #0
 8002910:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002912:	4b6a      	ldr	r3, [pc, #424]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002914:	68db      	ldr	r3, [r3, #12]
 8002916:	f003 0303 	and.w	r3, r3, #3
 800291a:	2b00      	cmp	r3, #0
 800291c:	d018      	beq.n	8002950 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800291e:	4b67      	ldr	r3, [pc, #412]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	f003 0203 	and.w	r2, r3, #3
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	429a      	cmp	r2, r3
 800292c:	d10d      	bne.n	800294a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	681b      	ldr	r3, [r3, #0]
       ||
 8002932:	2b00      	cmp	r3, #0
 8002934:	d009      	beq.n	800294a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002936:	4b61      	ldr	r3, [pc, #388]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002938:	68db      	ldr	r3, [r3, #12]
 800293a:	091b      	lsrs	r3, r3, #4
 800293c:	f003 0307 	and.w	r3, r3, #7
 8002940:	1c5a      	adds	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
       ||
 8002946:	429a      	cmp	r2, r3
 8002948:	d047      	beq.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	73fb      	strb	r3, [r7, #15]
 800294e:	e044      	b.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	2b03      	cmp	r3, #3
 8002956:	d018      	beq.n	800298a <RCCEx_PLLSAI2_Config+0x86>
 8002958:	2b03      	cmp	r3, #3
 800295a:	d825      	bhi.n	80029a8 <RCCEx_PLLSAI2_Config+0xa4>
 800295c:	2b01      	cmp	r3, #1
 800295e:	d002      	beq.n	8002966 <RCCEx_PLLSAI2_Config+0x62>
 8002960:	2b02      	cmp	r3, #2
 8002962:	d009      	beq.n	8002978 <RCCEx_PLLSAI2_Config+0x74>
 8002964:	e020      	b.n	80029a8 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002966:	4b55      	ldr	r3, [pc, #340]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0302 	and.w	r3, r3, #2
 800296e:	2b00      	cmp	r3, #0
 8002970:	d11d      	bne.n	80029ae <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002976:	e01a      	b.n	80029ae <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002978:	4b50      	ldr	r3, [pc, #320]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002980:	2b00      	cmp	r3, #0
 8002982:	d116      	bne.n	80029b2 <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002988:	e013      	b.n	80029b2 <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800298a:	4b4c      	ldr	r3, [pc, #304]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d10f      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002996:	4b49      	ldr	r3, [pc, #292]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d109      	bne.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80029a2:	2301      	movs	r3, #1
 80029a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029a6:	e006      	b.n	80029b6 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029a8:	2301      	movs	r3, #1
 80029aa:	73fb      	strb	r3, [r7, #15]
      break;
 80029ac:	e004      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029ae:	bf00      	nop
 80029b0:	e002      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b2:	bf00      	nop
 80029b4:	e000      	b.n	80029b8 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80029b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80029b8:	7bfb      	ldrb	r3, [r7, #15]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d10d      	bne.n	80029da <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029be:	4b3f      	ldr	r3, [pc, #252]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6819      	ldr	r1, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	685b      	ldr	r3, [r3, #4]
 80029ce:	3b01      	subs	r3, #1
 80029d0:	011b      	lsls	r3, r3, #4
 80029d2:	430b      	orrs	r3, r1
 80029d4:	4939      	ldr	r1, [pc, #228]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029d6:	4313      	orrs	r3, r2
 80029d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029da:	7bfb      	ldrb	r3, [r7, #15]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d167      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80029e0:	4b36      	ldr	r3, [pc, #216]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a35      	ldr	r2, [pc, #212]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 80029e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80029ec:	f7fe f858 	bl	8000aa0 <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80029f2:	e009      	b.n	8002a08 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80029f4:	f7fe f854 	bl	8000aa0 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d902      	bls.n	8002a08 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a02:	2303      	movs	r3, #3
 8002a04:	73fb      	strb	r3, [r7, #15]
        break;
 8002a06:	e005      	b.n	8002a14 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002a08:	4b2c      	ldr	r3, [pc, #176]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d1ef      	bne.n	80029f4 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a14:	7bfb      	ldrb	r3, [r7, #15]
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d14a      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d111      	bne.n	8002a44 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a20:	4b26      	ldr	r3, [pc, #152]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a22:	695b      	ldr	r3, [r3, #20]
 8002a24:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002a28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a2c:	687a      	ldr	r2, [r7, #4]
 8002a2e:	6892      	ldr	r2, [r2, #8]
 8002a30:	0211      	lsls	r1, r2, #8
 8002a32:	687a      	ldr	r2, [r7, #4]
 8002a34:	68d2      	ldr	r2, [r2, #12]
 8002a36:	0912      	lsrs	r2, r2, #4
 8002a38:	0452      	lsls	r2, r2, #17
 8002a3a:	430a      	orrs	r2, r1
 8002a3c:	491f      	ldr	r1, [pc, #124]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	614b      	str	r3, [r1, #20]
 8002a42:	e011      	b.n	8002a68 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002a44:	4b1d      	ldr	r3, [pc, #116]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a46:	695b      	ldr	r3, [r3, #20]
 8002a48:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a4c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a50:	687a      	ldr	r2, [r7, #4]
 8002a52:	6892      	ldr	r2, [r2, #8]
 8002a54:	0211      	lsls	r1, r2, #8
 8002a56:	687a      	ldr	r2, [r7, #4]
 8002a58:	6912      	ldr	r2, [r2, #16]
 8002a5a:	0852      	lsrs	r2, r2, #1
 8002a5c:	3a01      	subs	r2, #1
 8002a5e:	0652      	lsls	r2, r2, #25
 8002a60:	430a      	orrs	r2, r1
 8002a62:	4916      	ldr	r1, [pc, #88]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002a68:	4b14      	ldr	r3, [pc, #80]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	4a13      	ldr	r2, [pc, #76]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a72:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe f814 	bl	8000aa0 <HAL_GetTick>
 8002a78:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a7a:	e009      	b.n	8002a90 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002a7c:	f7fe f810 	bl	8000aa0 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	2b02      	cmp	r3, #2
 8002a88:	d902      	bls.n	8002a90 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8002a8a:	2303      	movs	r3, #3
 8002a8c:	73fb      	strb	r3, [r7, #15]
          break;
 8002a8e:	e005      	b.n	8002a9c <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002a90:	4b0a      	ldr	r3, [pc, #40]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d0ef      	beq.n	8002a7c <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8002a9c:	7bfb      	ldrb	r3, [r7, #15]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d106      	bne.n	8002ab0 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002aa2:	4b06      	ldr	r3, [pc, #24]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aa4:	695a      	ldr	r2, [r3, #20]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	695b      	ldr	r3, [r3, #20]
 8002aaa:	4904      	ldr	r1, [pc, #16]	; (8002abc <RCCEx_PLLSAI2_Config+0x1b8>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002ab0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	3710      	adds	r7, #16
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	bd80      	pop	{r7, pc}
 8002aba:	bf00      	nop
 8002abc:	40021000 	.word	0x40021000

08002ac0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ac0:	b580      	push	{r7, lr}
 8002ac2:	b082      	sub	sp, #8
 8002ac4:	af00      	add	r7, sp, #0
 8002ac6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d101      	bne.n	8002ad2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	e040      	b.n	8002b54 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d106      	bne.n	8002ae8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f7fd fe30 	bl	8000748 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2224      	movs	r2, #36	; 0x24
 8002aec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0201 	bic.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f000 fb2e 	bl	8003160 <UART_SetConfig>
 8002b04:	4603      	mov	r3, r0
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d101      	bne.n	8002b0e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e022      	b.n	8002b54 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d002      	beq.n	8002b1c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	f000 fdac 	bl	8003674 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	685a      	ldr	r2, [r3, #4]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b2a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	689a      	ldr	r2, [r3, #8]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b3a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	681a      	ldr	r2, [r3, #0]
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f042 0201 	orr.w	r2, r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b4c:	6878      	ldr	r0, [r7, #4]
 8002b4e:	f000 fe33 	bl	80037b8 <UART_CheckIdleState>
 8002b52:	4603      	mov	r3, r0
}
 8002b54:	4618      	mov	r0, r3
 8002b56:	3708      	adds	r7, #8
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}

08002b5c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b0ba      	sub	sp, #232	; 0xe8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	69db      	ldr	r3, [r3, #28]
 8002b6a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002b82:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002b86:	f640 030f 	movw	r3, #2063	; 0x80f
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002b90:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d115      	bne.n	8002bc4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b9c:	f003 0320 	and.w	r3, r3, #32
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d00f      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002ba4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002ba8:	f003 0320 	and.w	r3, r3, #32
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d009      	beq.n	8002bc4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 82a6 	beq.w	8003106 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	4798      	blx	r3
      }
      return;
 8002bc2:	e2a0      	b.n	8003106 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002bc4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	f000 8117 	beq.w	8002dfc <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002bce:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002bd2:	f003 0301 	and.w	r3, r3, #1
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d106      	bne.n	8002be8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002bda:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002bde:	4b85      	ldr	r3, [pc, #532]	; (8002df4 <HAL_UART_IRQHandler+0x298>)
 8002be0:	4013      	ands	r3, r2
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	f000 810a 	beq.w	8002dfc <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002be8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002bec:	f003 0301 	and.w	r3, r3, #1
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	d011      	beq.n	8002c18 <HAL_UART_IRQHandler+0xbc>
 8002bf4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002bf8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bfc:	2b00      	cmp	r3, #0
 8002bfe:	d00b      	beq.n	8002c18 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2201      	movs	r2, #1
 8002c06:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c0e:	f043 0201 	orr.w	r2, r3, #1
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c1c:	f003 0302 	and.w	r3, r3, #2
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d011      	beq.n	8002c48 <HAL_UART_IRQHandler+0xec>
 8002c24:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00b      	beq.n	8002c48 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	2202      	movs	r2, #2
 8002c36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c3e:	f043 0204 	orr.w	r2, r3, #4
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4c:	f003 0304 	and.w	r3, r3, #4
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d011      	beq.n	8002c78 <HAL_UART_IRQHandler+0x11c>
 8002c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c58:	f003 0301 	and.w	r3, r3, #1
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d00b      	beq.n	8002c78 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	2204      	movs	r2, #4
 8002c66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002c6e:	f043 0202 	orr.w	r2, r3, #2
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002c78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c7c:	f003 0308 	and.w	r3, r3, #8
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d017      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c88:	f003 0320 	and.w	r3, r3, #32
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d105      	bne.n	8002c9c <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002c90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002c94:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d00b      	beq.n	8002cb4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	2208      	movs	r2, #8
 8002ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002caa:	f043 0208 	orr.w	r2, r3, #8
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002cb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cb8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002cbc:	2b00      	cmp	r3, #0
 8002cbe:	d012      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x18a>
 8002cc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002cc4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d00c      	beq.n	8002ce6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002cd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cdc:	f043 0220 	orr.w	r2, r3, #32
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	f000 820c 	beq.w	800310a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002cf6:	f003 0320 	and.w	r3, r3, #32
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002cfe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002d02:	f003 0320 	and.w	r3, r3, #32
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d007      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d003      	beq.n	8002d1a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002d20:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	689b      	ldr	r3, [r3, #8]
 8002d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2e:	2b40      	cmp	r3, #64	; 0x40
 8002d30:	d005      	beq.n	8002d3e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002d32:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002d36:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d04f      	beq.n	8002dde <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 fe47 	bl	80039d2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d4e:	2b40      	cmp	r3, #64	; 0x40
 8002d50:	d141      	bne.n	8002dd6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	3308      	adds	r3, #8
 8002d58:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002d68:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002d6c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	3308      	adds	r3, #8
 8002d7a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002d7e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002d82:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d86:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002d8a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002d8e:	e841 2300 	strex	r3, r2, [r1]
 8002d92:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002d96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d1d9      	bne.n	8002d52 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d013      	beq.n	8002dce <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002daa:	4a13      	ldr	r2, [pc, #76]	; (8002df8 <HAL_UART_IRQHandler+0x29c>)
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db2:	4618      	mov	r0, r3
 8002db4:	f7fe f8ac 	bl	8000f10 <HAL_DMA_Abort_IT>
 8002db8:	4603      	mov	r3, r0
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d017      	beq.n	8002dee <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002dc8:	4610      	mov	r0, r2
 8002dca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dcc:	e00f      	b.n	8002dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 f9b0 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dd4:	e00b      	b.n	8002dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f000 f9ac 	bl	8003134 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ddc:	e007      	b.n	8002dee <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002dde:	6878      	ldr	r0, [r7, #4]
 8002de0:	f000 f9a8 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002dec:	e18d      	b.n	800310a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002dee:	bf00      	nop
    return;
 8002df0:	e18b      	b.n	800310a <HAL_UART_IRQHandler+0x5ae>
 8002df2:	bf00      	nop
 8002df4:	04000120 	.word	0x04000120
 8002df8:	08003a99 	.word	0x08003a99

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	f040 8146 	bne.w	8003092 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e06:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002e0a:	f003 0310 	and.w	r3, r3, #16
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f000 813f 	beq.w	8003092 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002e18:	f003 0310 	and.w	r3, r3, #16
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8138 	beq.w	8003092 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	2210      	movs	r2, #16
 8002e28:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e34:	2b40      	cmp	r3, #64	; 0x40
 8002e36:	f040 80b4 	bne.w	8002fa2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	685b      	ldr	r3, [r3, #4]
 8002e42:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002e46:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	f000 815f 	beq.w	800310e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002e56:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	f080 8157 	bcs.w	800310e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002e66:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f003 0320 	and.w	r3, r3, #32
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 8085 	bne.w	8002f86 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e84:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e88:	e853 3f00 	ldrex	r3, [r3]
 8002e8c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002e90:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e98:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	461a      	mov	r2, r3
 8002ea2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002ea6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002eaa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eae:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002eb2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002eb6:	e841 2300 	strex	r3, r2, [r1]
 8002eba:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002ebe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1da      	bne.n	8002e7c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	3308      	adds	r3, #8
 8002ecc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ece:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ed0:	e853 3f00 	ldrex	r3, [r3]
 8002ed4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002ed6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002ed8:	f023 0301 	bic.w	r3, r3, #1
 8002edc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	3308      	adds	r3, #8
 8002ee6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002eea:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002eee:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ef0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002ef2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ef6:	e841 2300 	strex	r3, r2, [r1]
 8002efa:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002efc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d1e1      	bne.n	8002ec6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f0c:	e853 3f00 	ldrex	r3, [r3]
 8002f10:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002f12:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002f14:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f18:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	3308      	adds	r3, #8
 8002f22:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002f26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002f28:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f2a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002f2c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002f2e:	e841 2300 	strex	r3, r2, [r1]
 8002f32:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1e3      	bne.n	8002f02 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	2220      	movs	r2, #32
 8002f3e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f4e:	e853 3f00 	ldrex	r3, [r3]
 8002f52:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002f54:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f56:	f023 0310 	bic.w	r3, r3, #16
 8002f5a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	461a      	mov	r2, r3
 8002f64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002f68:	65bb      	str	r3, [r7, #88]	; 0x58
 8002f6a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f6c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002f6e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002f70:	e841 2300 	strex	r3, r2, [r1]
 8002f74:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d1e4      	bne.n	8002f46 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f80:	4618      	mov	r0, r3
 8002f82:	f7fd ff87 	bl	8000e94 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	1ad3      	subs	r3, r2, r3
 8002f96:	b29b      	uxth	r3, r3
 8002f98:	4619      	mov	r1, r3
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 f8d4 	bl	8003148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002fa0:	e0b5      	b.n	800310e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fae:	b29b      	uxth	r3, r3
 8002fb0:	1ad3      	subs	r3, r2, r3
 8002fb2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	f000 80a7 	beq.w	8003112 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002fc4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	f000 80a2 	beq.w	8003112 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002fd6:	e853 3f00 	ldrex	r3, [r3]
 8002fda:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002fdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002fe2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002ff0:	647b      	str	r3, [r7, #68]	; 0x44
 8002ff2:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ff4:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002ff6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002ff8:	e841 2300 	strex	r3, r2, [r1]
 8002ffc:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002ffe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003000:	2b00      	cmp	r3, #0
 8003002:	d1e4      	bne.n	8002fce <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	3308      	adds	r3, #8
 800300a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800300c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800300e:	e853 3f00 	ldrex	r3, [r3]
 8003012:	623b      	str	r3, [r7, #32]
   return(result);
 8003014:	6a3b      	ldr	r3, [r7, #32]
 8003016:	f023 0301 	bic.w	r3, r3, #1
 800301a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	3308      	adds	r3, #8
 8003024:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003028:	633a      	str	r2, [r7, #48]	; 0x30
 800302a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800302c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800302e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003030:	e841 2300 	strex	r3, r2, [r1]
 8003034:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003038:	2b00      	cmp	r3, #0
 800303a:	d1e3      	bne.n	8003004 <HAL_UART_IRQHandler+0x4a8>
#endif

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2220      	movs	r2, #32
 8003040:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2200      	movs	r2, #0
 800304c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	e853 3f00 	ldrex	r3, [r3]
 800305a:	60fb      	str	r3, [r7, #12]
   return(result);
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f023 0310 	bic.w	r3, r3, #16
 8003062:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	461a      	mov	r2, r3
 800306c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003070:	61fb      	str	r3, [r7, #28]
 8003072:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003074:	69b9      	ldr	r1, [r7, #24]
 8003076:	69fa      	ldr	r2, [r7, #28]
 8003078:	e841 2300 	strex	r3, r2, [r1]
 800307c:	617b      	str	r3, [r7, #20]
   return(result);
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d1e4      	bne.n	800304e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003084:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003088:	4619      	mov	r1, r3
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f000 f85c 	bl	8003148 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003090:	e03f      	b.n	8003112 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003092:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003096:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800309a:	2b00      	cmp	r3, #0
 800309c:	d00e      	beq.n	80030bc <HAL_UART_IRQHandler+0x560>
 800309e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d008      	beq.n	80030bc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80030b2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80030b4:	6878      	ldr	r0, [r7, #4]
 80030b6:	f000 fd2f 	bl	8003b18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80030ba:	e02d      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80030bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d00e      	beq.n	80030e6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80030c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d008      	beq.n	80030e6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d01c      	beq.n	8003116 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	4798      	blx	r3
    }
    return;
 80030e4:	e017      	b.n	8003116 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80030e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d012      	beq.n	8003118 <HAL_UART_IRQHandler+0x5bc>
 80030f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00c      	beq.n	8003118 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 80030fe:	6878      	ldr	r0, [r7, #4]
 8003100:	f000 fce0 	bl	8003ac4 <UART_EndTransmit_IT>
    return;
 8003104:	e008      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003106:	bf00      	nop
 8003108:	e006      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
    return;
 800310a:	bf00      	nop
 800310c:	e004      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
      return;
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003116:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003118:	37e8      	adds	r7, #232	; 0xe8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}
 800311e:	bf00      	nop

08003120 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003128:	bf00      	nop
 800312a:	370c      	adds	r7, #12
 800312c:	46bd      	mov	sp, r7
 800312e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003132:	4770      	bx	lr

08003134 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003134:	b480      	push	{r7}
 8003136:	b083      	sub	sp, #12
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800313c:	bf00      	nop
 800313e:	370c      	adds	r7, #12
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr

08003148 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
 8003150:	460b      	mov	r3, r1
 8003152:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315e:	4770      	bx	lr

08003160 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003160:	b5b0      	push	{r4, r5, r7, lr}
 8003162:	b088      	sub	sp, #32
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003168:	2300      	movs	r3, #0
 800316a:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	691b      	ldr	r3, [r3, #16]
 8003174:	431a      	orrs	r2, r3
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	431a      	orrs	r2, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	69db      	ldr	r3, [r3, #28]
 8003180:	4313      	orrs	r3, r2
 8003182:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	681a      	ldr	r2, [r3, #0]
 800318a:	4bad      	ldr	r3, [pc, #692]	; (8003440 <UART_SetConfig+0x2e0>)
 800318c:	4013      	ands	r3, r2
 800318e:	687a      	ldr	r2, [r7, #4]
 8003190:	6812      	ldr	r2, [r2, #0]
 8003192:	69f9      	ldr	r1, [r7, #28]
 8003194:	430b      	orrs	r3, r1
 8003196:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	68da      	ldr	r2, [r3, #12]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	699b      	ldr	r3, [r3, #24]
 80031b2:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4aa2      	ldr	r2, [pc, #648]	; (8003444 <UART_SetConfig+0x2e4>)
 80031ba:	4293      	cmp	r3, r2
 80031bc:	d004      	beq.n	80031c8 <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	69fa      	ldr	r2, [r7, #28]
 80031c4:	4313      	orrs	r3, r2
 80031c6:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	689b      	ldr	r3, [r3, #8]
 80031ce:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	69fa      	ldr	r2, [r7, #28]
 80031d8:	430a      	orrs	r2, r1
 80031da:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4a99      	ldr	r2, [pc, #612]	; (8003448 <UART_SetConfig+0x2e8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d121      	bne.n	800322a <UART_SetConfig+0xca>
 80031e6:	4b99      	ldr	r3, [pc, #612]	; (800344c <UART_SetConfig+0x2ec>)
 80031e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b03      	cmp	r3, #3
 80031f2:	d817      	bhi.n	8003224 <UART_SetConfig+0xc4>
 80031f4:	a201      	add	r2, pc, #4	; (adr r2, 80031fc <UART_SetConfig+0x9c>)
 80031f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031fa:	bf00      	nop
 80031fc:	0800320d 	.word	0x0800320d
 8003200:	08003219 	.word	0x08003219
 8003204:	08003213 	.word	0x08003213
 8003208:	0800321f 	.word	0x0800321f
 800320c:	2301      	movs	r3, #1
 800320e:	76fb      	strb	r3, [r7, #27]
 8003210:	e0e7      	b.n	80033e2 <UART_SetConfig+0x282>
 8003212:	2302      	movs	r3, #2
 8003214:	76fb      	strb	r3, [r7, #27]
 8003216:	e0e4      	b.n	80033e2 <UART_SetConfig+0x282>
 8003218:	2304      	movs	r3, #4
 800321a:	76fb      	strb	r3, [r7, #27]
 800321c:	e0e1      	b.n	80033e2 <UART_SetConfig+0x282>
 800321e:	2308      	movs	r3, #8
 8003220:	76fb      	strb	r3, [r7, #27]
 8003222:	e0de      	b.n	80033e2 <UART_SetConfig+0x282>
 8003224:	2310      	movs	r3, #16
 8003226:	76fb      	strb	r3, [r7, #27]
 8003228:	e0db      	b.n	80033e2 <UART_SetConfig+0x282>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4a88      	ldr	r2, [pc, #544]	; (8003450 <UART_SetConfig+0x2f0>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d132      	bne.n	800329a <UART_SetConfig+0x13a>
 8003234:	4b85      	ldr	r3, [pc, #532]	; (800344c <UART_SetConfig+0x2ec>)
 8003236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800323a:	f003 030c 	and.w	r3, r3, #12
 800323e:	2b0c      	cmp	r3, #12
 8003240:	d828      	bhi.n	8003294 <UART_SetConfig+0x134>
 8003242:	a201      	add	r2, pc, #4	; (adr r2, 8003248 <UART_SetConfig+0xe8>)
 8003244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003248:	0800327d 	.word	0x0800327d
 800324c:	08003295 	.word	0x08003295
 8003250:	08003295 	.word	0x08003295
 8003254:	08003295 	.word	0x08003295
 8003258:	08003289 	.word	0x08003289
 800325c:	08003295 	.word	0x08003295
 8003260:	08003295 	.word	0x08003295
 8003264:	08003295 	.word	0x08003295
 8003268:	08003283 	.word	0x08003283
 800326c:	08003295 	.word	0x08003295
 8003270:	08003295 	.word	0x08003295
 8003274:	08003295 	.word	0x08003295
 8003278:	0800328f 	.word	0x0800328f
 800327c:	2300      	movs	r3, #0
 800327e:	76fb      	strb	r3, [r7, #27]
 8003280:	e0af      	b.n	80033e2 <UART_SetConfig+0x282>
 8003282:	2302      	movs	r3, #2
 8003284:	76fb      	strb	r3, [r7, #27]
 8003286:	e0ac      	b.n	80033e2 <UART_SetConfig+0x282>
 8003288:	2304      	movs	r3, #4
 800328a:	76fb      	strb	r3, [r7, #27]
 800328c:	e0a9      	b.n	80033e2 <UART_SetConfig+0x282>
 800328e:	2308      	movs	r3, #8
 8003290:	76fb      	strb	r3, [r7, #27]
 8003292:	e0a6      	b.n	80033e2 <UART_SetConfig+0x282>
 8003294:	2310      	movs	r3, #16
 8003296:	76fb      	strb	r3, [r7, #27]
 8003298:	e0a3      	b.n	80033e2 <UART_SetConfig+0x282>
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a6d      	ldr	r2, [pc, #436]	; (8003454 <UART_SetConfig+0x2f4>)
 80032a0:	4293      	cmp	r3, r2
 80032a2:	d120      	bne.n	80032e6 <UART_SetConfig+0x186>
 80032a4:	4b69      	ldr	r3, [pc, #420]	; (800344c <UART_SetConfig+0x2ec>)
 80032a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032aa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80032ae:	2b30      	cmp	r3, #48	; 0x30
 80032b0:	d013      	beq.n	80032da <UART_SetConfig+0x17a>
 80032b2:	2b30      	cmp	r3, #48	; 0x30
 80032b4:	d814      	bhi.n	80032e0 <UART_SetConfig+0x180>
 80032b6:	2b20      	cmp	r3, #32
 80032b8:	d009      	beq.n	80032ce <UART_SetConfig+0x16e>
 80032ba:	2b20      	cmp	r3, #32
 80032bc:	d810      	bhi.n	80032e0 <UART_SetConfig+0x180>
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d002      	beq.n	80032c8 <UART_SetConfig+0x168>
 80032c2:	2b10      	cmp	r3, #16
 80032c4:	d006      	beq.n	80032d4 <UART_SetConfig+0x174>
 80032c6:	e00b      	b.n	80032e0 <UART_SetConfig+0x180>
 80032c8:	2300      	movs	r3, #0
 80032ca:	76fb      	strb	r3, [r7, #27]
 80032cc:	e089      	b.n	80033e2 <UART_SetConfig+0x282>
 80032ce:	2302      	movs	r3, #2
 80032d0:	76fb      	strb	r3, [r7, #27]
 80032d2:	e086      	b.n	80033e2 <UART_SetConfig+0x282>
 80032d4:	2304      	movs	r3, #4
 80032d6:	76fb      	strb	r3, [r7, #27]
 80032d8:	e083      	b.n	80033e2 <UART_SetConfig+0x282>
 80032da:	2308      	movs	r3, #8
 80032dc:	76fb      	strb	r3, [r7, #27]
 80032de:	e080      	b.n	80033e2 <UART_SetConfig+0x282>
 80032e0:	2310      	movs	r3, #16
 80032e2:	76fb      	strb	r3, [r7, #27]
 80032e4:	e07d      	b.n	80033e2 <UART_SetConfig+0x282>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	4a5b      	ldr	r2, [pc, #364]	; (8003458 <UART_SetConfig+0x2f8>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d120      	bne.n	8003332 <UART_SetConfig+0x1d2>
 80032f0:	4b56      	ldr	r3, [pc, #344]	; (800344c <UART_SetConfig+0x2ec>)
 80032f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80032f6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80032fa:	2bc0      	cmp	r3, #192	; 0xc0
 80032fc:	d013      	beq.n	8003326 <UART_SetConfig+0x1c6>
 80032fe:	2bc0      	cmp	r3, #192	; 0xc0
 8003300:	d814      	bhi.n	800332c <UART_SetConfig+0x1cc>
 8003302:	2b80      	cmp	r3, #128	; 0x80
 8003304:	d009      	beq.n	800331a <UART_SetConfig+0x1ba>
 8003306:	2b80      	cmp	r3, #128	; 0x80
 8003308:	d810      	bhi.n	800332c <UART_SetConfig+0x1cc>
 800330a:	2b00      	cmp	r3, #0
 800330c:	d002      	beq.n	8003314 <UART_SetConfig+0x1b4>
 800330e:	2b40      	cmp	r3, #64	; 0x40
 8003310:	d006      	beq.n	8003320 <UART_SetConfig+0x1c0>
 8003312:	e00b      	b.n	800332c <UART_SetConfig+0x1cc>
 8003314:	2300      	movs	r3, #0
 8003316:	76fb      	strb	r3, [r7, #27]
 8003318:	e063      	b.n	80033e2 <UART_SetConfig+0x282>
 800331a:	2302      	movs	r3, #2
 800331c:	76fb      	strb	r3, [r7, #27]
 800331e:	e060      	b.n	80033e2 <UART_SetConfig+0x282>
 8003320:	2304      	movs	r3, #4
 8003322:	76fb      	strb	r3, [r7, #27]
 8003324:	e05d      	b.n	80033e2 <UART_SetConfig+0x282>
 8003326:	2308      	movs	r3, #8
 8003328:	76fb      	strb	r3, [r7, #27]
 800332a:	e05a      	b.n	80033e2 <UART_SetConfig+0x282>
 800332c:	2310      	movs	r3, #16
 800332e:	76fb      	strb	r3, [r7, #27]
 8003330:	e057      	b.n	80033e2 <UART_SetConfig+0x282>
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	4a49      	ldr	r2, [pc, #292]	; (800345c <UART_SetConfig+0x2fc>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d125      	bne.n	8003388 <UART_SetConfig+0x228>
 800333c:	4b43      	ldr	r3, [pc, #268]	; (800344c <UART_SetConfig+0x2ec>)
 800333e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003342:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003346:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334a:	d017      	beq.n	800337c <UART_SetConfig+0x21c>
 800334c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003350:	d817      	bhi.n	8003382 <UART_SetConfig+0x222>
 8003352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003356:	d00b      	beq.n	8003370 <UART_SetConfig+0x210>
 8003358:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800335c:	d811      	bhi.n	8003382 <UART_SetConfig+0x222>
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <UART_SetConfig+0x20a>
 8003362:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003366:	d006      	beq.n	8003376 <UART_SetConfig+0x216>
 8003368:	e00b      	b.n	8003382 <UART_SetConfig+0x222>
 800336a:	2300      	movs	r3, #0
 800336c:	76fb      	strb	r3, [r7, #27]
 800336e:	e038      	b.n	80033e2 <UART_SetConfig+0x282>
 8003370:	2302      	movs	r3, #2
 8003372:	76fb      	strb	r3, [r7, #27]
 8003374:	e035      	b.n	80033e2 <UART_SetConfig+0x282>
 8003376:	2304      	movs	r3, #4
 8003378:	76fb      	strb	r3, [r7, #27]
 800337a:	e032      	b.n	80033e2 <UART_SetConfig+0x282>
 800337c:	2308      	movs	r3, #8
 800337e:	76fb      	strb	r3, [r7, #27]
 8003380:	e02f      	b.n	80033e2 <UART_SetConfig+0x282>
 8003382:	2310      	movs	r3, #16
 8003384:	76fb      	strb	r3, [r7, #27]
 8003386:	e02c      	b.n	80033e2 <UART_SetConfig+0x282>
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	4a2d      	ldr	r2, [pc, #180]	; (8003444 <UART_SetConfig+0x2e4>)
 800338e:	4293      	cmp	r3, r2
 8003390:	d125      	bne.n	80033de <UART_SetConfig+0x27e>
 8003392:	4b2e      	ldr	r3, [pc, #184]	; (800344c <UART_SetConfig+0x2ec>)
 8003394:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003398:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800339c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a0:	d017      	beq.n	80033d2 <UART_SetConfig+0x272>
 80033a2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80033a6:	d817      	bhi.n	80033d8 <UART_SetConfig+0x278>
 80033a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ac:	d00b      	beq.n	80033c6 <UART_SetConfig+0x266>
 80033ae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033b2:	d811      	bhi.n	80033d8 <UART_SetConfig+0x278>
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d003      	beq.n	80033c0 <UART_SetConfig+0x260>
 80033b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80033bc:	d006      	beq.n	80033cc <UART_SetConfig+0x26c>
 80033be:	e00b      	b.n	80033d8 <UART_SetConfig+0x278>
 80033c0:	2300      	movs	r3, #0
 80033c2:	76fb      	strb	r3, [r7, #27]
 80033c4:	e00d      	b.n	80033e2 <UART_SetConfig+0x282>
 80033c6:	2302      	movs	r3, #2
 80033c8:	76fb      	strb	r3, [r7, #27]
 80033ca:	e00a      	b.n	80033e2 <UART_SetConfig+0x282>
 80033cc:	2304      	movs	r3, #4
 80033ce:	76fb      	strb	r3, [r7, #27]
 80033d0:	e007      	b.n	80033e2 <UART_SetConfig+0x282>
 80033d2:	2308      	movs	r3, #8
 80033d4:	76fb      	strb	r3, [r7, #27]
 80033d6:	e004      	b.n	80033e2 <UART_SetConfig+0x282>
 80033d8:	2310      	movs	r3, #16
 80033da:	76fb      	strb	r3, [r7, #27]
 80033dc:	e001      	b.n	80033e2 <UART_SetConfig+0x282>
 80033de:	2310      	movs	r3, #16
 80033e0:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a17      	ldr	r2, [pc, #92]	; (8003444 <UART_SetConfig+0x2e4>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	f040 8087 	bne.w	80034fc <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80033ee:	7efb      	ldrb	r3, [r7, #27]
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d837      	bhi.n	8003464 <UART_SetConfig+0x304>
 80033f4:	a201      	add	r2, pc, #4	; (adr r2, 80033fc <UART_SetConfig+0x29c>)
 80033f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033fa:	bf00      	nop
 80033fc:	08003421 	.word	0x08003421
 8003400:	08003465 	.word	0x08003465
 8003404:	08003429 	.word	0x08003429
 8003408:	08003465 	.word	0x08003465
 800340c:	0800342f 	.word	0x0800342f
 8003410:	08003465 	.word	0x08003465
 8003414:	08003465 	.word	0x08003465
 8003418:	08003465 	.word	0x08003465
 800341c:	08003437 	.word	0x08003437
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003420:	f7fe fe06 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 8003424:	6178      	str	r0, [r7, #20]
        break;
 8003426:	e022      	b.n	800346e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <UART_SetConfig+0x300>)
 800342a:	617b      	str	r3, [r7, #20]
        break;
 800342c:	e01f      	b.n	800346e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800342e:	f7fe fd67 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003432:	6178      	str	r0, [r7, #20]
        break;
 8003434:	e01b      	b.n	800346e <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003436:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800343a:	617b      	str	r3, [r7, #20]
        break;
 800343c:	e017      	b.n	800346e <UART_SetConfig+0x30e>
 800343e:	bf00      	nop
 8003440:	efff69f3 	.word	0xefff69f3
 8003444:	40008000 	.word	0x40008000
 8003448:	40013800 	.word	0x40013800
 800344c:	40021000 	.word	0x40021000
 8003450:	40004400 	.word	0x40004400
 8003454:	40004800 	.word	0x40004800
 8003458:	40004c00 	.word	0x40004c00
 800345c:	40005000 	.word	0x40005000
 8003460:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8003464:	2300      	movs	r3, #0
 8003466:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003468:	2301      	movs	r3, #1
 800346a:	76bb      	strb	r3, [r7, #26]
        break;
 800346c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800346e:	697b      	ldr	r3, [r7, #20]
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80f1 	beq.w	8003658 <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	4613      	mov	r3, r2
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	4413      	add	r3, r2
 8003480:	697a      	ldr	r2, [r7, #20]
 8003482:	429a      	cmp	r2, r3
 8003484:	d305      	bcc.n	8003492 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800348c:	697a      	ldr	r2, [r7, #20]
 800348e:	429a      	cmp	r2, r3
 8003490:	d902      	bls.n	8003498 <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	76bb      	strb	r3, [r7, #26]
 8003496:	e0df      	b.n	8003658 <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003498:	697b      	ldr	r3, [r7, #20]
 800349a:	4618      	mov	r0, r3
 800349c:	f04f 0100 	mov.w	r1, #0
 80034a0:	f04f 0200 	mov.w	r2, #0
 80034a4:	f04f 0300 	mov.w	r3, #0
 80034a8:	020b      	lsls	r3, r1, #8
 80034aa:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80034ae:	0202      	lsls	r2, r0, #8
 80034b0:	6879      	ldr	r1, [r7, #4]
 80034b2:	6849      	ldr	r1, [r1, #4]
 80034b4:	0849      	lsrs	r1, r1, #1
 80034b6:	4608      	mov	r0, r1
 80034b8:	f04f 0100 	mov.w	r1, #0
 80034bc:	1814      	adds	r4, r2, r0
 80034be:	eb43 0501 	adc.w	r5, r3, r1
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	461a      	mov	r2, r3
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	4620      	mov	r0, r4
 80034ce:	4629      	mov	r1, r5
 80034d0:	f7fc fe7a 	bl	80001c8 <__aeabi_uldivmod>
 80034d4:	4602      	mov	r2, r0
 80034d6:	460b      	mov	r3, r1
 80034d8:	4613      	mov	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80034e2:	d308      	bcc.n	80034f6 <UART_SetConfig+0x396>
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80034ea:	d204      	bcs.n	80034f6 <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	693a      	ldr	r2, [r7, #16]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	e0b0      	b.n	8003658 <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80034f6:	2301      	movs	r3, #1
 80034f8:	76bb      	strb	r3, [r7, #26]
 80034fa:	e0ad      	b.n	8003658 <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	69db      	ldr	r3, [r3, #28]
 8003500:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003504:	d15b      	bne.n	80035be <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 8003506:	7efb      	ldrb	r3, [r7, #27]
 8003508:	2b08      	cmp	r3, #8
 800350a:	d828      	bhi.n	800355e <UART_SetConfig+0x3fe>
 800350c:	a201      	add	r2, pc, #4	; (adr r2, 8003514 <UART_SetConfig+0x3b4>)
 800350e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003512:	bf00      	nop
 8003514:	08003539 	.word	0x08003539
 8003518:	08003541 	.word	0x08003541
 800351c:	08003549 	.word	0x08003549
 8003520:	0800355f 	.word	0x0800355f
 8003524:	0800354f 	.word	0x0800354f
 8003528:	0800355f 	.word	0x0800355f
 800352c:	0800355f 	.word	0x0800355f
 8003530:	0800355f 	.word	0x0800355f
 8003534:	08003557 	.word	0x08003557
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003538:	f7fe fd7a 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 800353c:	6178      	str	r0, [r7, #20]
        break;
 800353e:	e013      	b.n	8003568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003540:	f7fe fd8c 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 8003544:	6178      	str	r0, [r7, #20]
        break;
 8003546:	e00f      	b.n	8003568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003548:	4b49      	ldr	r3, [pc, #292]	; (8003670 <UART_SetConfig+0x510>)
 800354a:	617b      	str	r3, [r7, #20]
        break;
 800354c:	e00c      	b.n	8003568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800354e:	f7fe fcd7 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 8003552:	6178      	str	r0, [r7, #20]
        break;
 8003554:	e008      	b.n	8003568 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003556:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800355a:	617b      	str	r3, [r7, #20]
        break;
 800355c:	e004      	b.n	8003568 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800355e:	2300      	movs	r3, #0
 8003560:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8003562:	2301      	movs	r3, #1
 8003564:	76bb      	strb	r3, [r7, #26]
        break;
 8003566:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d074      	beq.n	8003658 <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	005a      	lsls	r2, r3, #1
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	685b      	ldr	r3, [r3, #4]
 8003576:	085b      	lsrs	r3, r3, #1
 8003578:	441a      	add	r2, r3
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003582:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	2b0f      	cmp	r3, #15
 8003588:	d916      	bls.n	80035b8 <UART_SetConfig+0x458>
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003590:	d212      	bcs.n	80035b8 <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	b29b      	uxth	r3, r3
 8003596:	f023 030f 	bic.w	r3, r3, #15
 800359a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	085b      	lsrs	r3, r3, #1
 80035a0:	b29b      	uxth	r3, r3
 80035a2:	f003 0307 	and.w	r3, r3, #7
 80035a6:	b29a      	uxth	r2, r3
 80035a8:	89fb      	ldrh	r3, [r7, #14]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	89fa      	ldrh	r2, [r7, #14]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e04f      	b.n	8003658 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	76bb      	strb	r3, [r7, #26]
 80035bc:	e04c      	b.n	8003658 <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 80035be:	7efb      	ldrb	r3, [r7, #27]
 80035c0:	2b08      	cmp	r3, #8
 80035c2:	d828      	bhi.n	8003616 <UART_SetConfig+0x4b6>
 80035c4:	a201      	add	r2, pc, #4	; (adr r2, 80035cc <UART_SetConfig+0x46c>)
 80035c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035ca:	bf00      	nop
 80035cc:	080035f1 	.word	0x080035f1
 80035d0:	080035f9 	.word	0x080035f9
 80035d4:	08003601 	.word	0x08003601
 80035d8:	08003617 	.word	0x08003617
 80035dc:	08003607 	.word	0x08003607
 80035e0:	08003617 	.word	0x08003617
 80035e4:	08003617 	.word	0x08003617
 80035e8:	08003617 	.word	0x08003617
 80035ec:	0800360f 	.word	0x0800360f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe fd1e 	bl	8002030 <HAL_RCC_GetPCLK1Freq>
 80035f4:	6178      	str	r0, [r7, #20]
        break;
 80035f6:	e013      	b.n	8003620 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80035f8:	f7fe fd30 	bl	800205c <HAL_RCC_GetPCLK2Freq>
 80035fc:	6178      	str	r0, [r7, #20]
        break;
 80035fe:	e00f      	b.n	8003620 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003600:	4b1b      	ldr	r3, [pc, #108]	; (8003670 <UART_SetConfig+0x510>)
 8003602:	617b      	str	r3, [r7, #20]
        break;
 8003604:	e00c      	b.n	8003620 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003606:	f7fe fc7b 	bl	8001f00 <HAL_RCC_GetSysClockFreq>
 800360a:	6178      	str	r0, [r7, #20]
        break;
 800360c:	e008      	b.n	8003620 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003612:	617b      	str	r3, [r7, #20]
        break;
 8003614:	e004      	b.n	8003620 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 8003616:	2300      	movs	r3, #0
 8003618:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	76bb      	strb	r3, [r7, #26]
        break;
 800361e:	bf00      	nop
    }

    if (pclk != 0U)
 8003620:	697b      	ldr	r3, [r7, #20]
 8003622:	2b00      	cmp	r3, #0
 8003624:	d018      	beq.n	8003658 <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
 800362a:	085a      	lsrs	r2, r3, #1
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	441a      	add	r2, r3
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	fbb2 f3f3 	udiv	r3, r2, r3
 8003638:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	2b0f      	cmp	r3, #15
 800363e:	d909      	bls.n	8003654 <UART_SetConfig+0x4f4>
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003646:	d205      	bcs.n	8003654 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	b29a      	uxth	r2, r3
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	60da      	str	r2, [r3, #12]
 8003652:	e001      	b.n	8003658 <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2200      	movs	r2, #0
 8003662:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003664:	7ebb      	ldrb	r3, [r7, #26]
}
 8003666:	4618      	mov	r0, r3
 8003668:	3720      	adds	r7, #32
 800366a:	46bd      	mov	sp, r7
 800366c:	bdb0      	pop	{r4, r5, r7, pc}
 800366e:	bf00      	nop
 8003670:	00f42400 	.word	0x00f42400

08003674 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003680:	f003 0301 	and.w	r3, r3, #1
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	f003 0302 	and.w	r3, r3, #2
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	430a      	orrs	r2, r1
 80036be:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036c4:	f003 0304 	and.w	r3, r3, #4
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	430a      	orrs	r2, r1
 80036e0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036e6:	f003 0308 	and.w	r3, r3, #8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d00a      	beq.n	8003704 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	685b      	ldr	r3, [r3, #4]
 80036f4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003708:	f003 0310 	and.w	r3, r3, #16
 800370c:	2b00      	cmp	r3, #0
 800370e:	d00a      	beq.n	8003726 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d00a      	beq.n	8003748 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003750:	2b00      	cmp	r3, #0
 8003752:	d01a      	beq.n	800378a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003772:	d10a      	bne.n	800378a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	681b      	ldr	r3, [r3, #0]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	430a      	orrs	r2, r1
 8003788:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003792:	2b00      	cmp	r3, #0
 8003794:	d00a      	beq.n	80037ac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	430a      	orrs	r2, r1
 80037aa:	605a      	str	r2, [r3, #4]
  }
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80037b8:	b580      	push	{r7, lr}
 80037ba:	b086      	sub	sp, #24
 80037bc:	af02      	add	r7, sp, #8
 80037be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	2200      	movs	r2, #0
 80037c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80037c8:	f7fd f96a 	bl	8000aa0 <HAL_GetTick>
 80037cc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	f003 0308 	and.w	r3, r3, #8
 80037d8:	2b08      	cmp	r3, #8
 80037da:	d10e      	bne.n	80037fa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80037dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	2200      	movs	r2, #0
 80037e6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80037ea:	6878      	ldr	r0, [r7, #4]
 80037ec:	f000 f82d 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 80037f0:	4603      	mov	r3, r0
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d001      	beq.n	80037fa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80037f6:	2303      	movs	r3, #3
 80037f8:	e023      	b.n	8003842 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	f003 0304 	and.w	r3, r3, #4
 8003804:	2b04      	cmp	r3, #4
 8003806:	d10e      	bne.n	8003826 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003808:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f000 f817 	bl	800384a <UART_WaitOnFlagUntilTimeout>
 800381c:	4603      	mov	r3, r0
 800381e:	2b00      	cmp	r3, #0
 8003820:	d001      	beq.n	8003826 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003822:	2303      	movs	r3, #3
 8003824:	e00d      	b.n	8003842 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2220      	movs	r2, #32
 800382a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2220      	movs	r2, #32
 8003830:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2200      	movs	r2, #0
 800383c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3710      	adds	r7, #16
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800384a:	b580      	push	{r7, lr}
 800384c:	b09c      	sub	sp, #112	; 0x70
 800384e:	af00      	add	r7, sp, #0
 8003850:	60f8      	str	r0, [r7, #12]
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	603b      	str	r3, [r7, #0]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800385a:	e0a5      	b.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800385c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800385e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003862:	f000 80a1 	beq.w	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003866:	f7fd f91b 	bl	8000aa0 <HAL_GetTick>
 800386a:	4602      	mov	r2, r0
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	1ad3      	subs	r3, r2, r3
 8003870:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003872:	429a      	cmp	r2, r3
 8003874:	d302      	bcc.n	800387c <UART_WaitOnFlagUntilTimeout+0x32>
 8003876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003878:	2b00      	cmp	r3, #0
 800387a:	d13e      	bne.n	80038fa <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003884:	e853 3f00 	ldrex	r3, [r3]
 8003888:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800388a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800388c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003890:	667b      	str	r3, [r7, #100]	; 0x64
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	461a      	mov	r2, r3
 8003898:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800389a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800389c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800389e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80038a0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80038a2:	e841 2300 	strex	r3, r2, [r1]
 80038a6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80038a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d1e6      	bne.n	800387c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	3308      	adds	r3, #8
 80038b4:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80038b8:	e853 3f00 	ldrex	r3, [r3]
 80038bc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	f023 0301 	bic.w	r3, r3, #1
 80038c4:	663b      	str	r3, [r7, #96]	; 0x60
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	3308      	adds	r3, #8
 80038cc:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80038ce:	64ba      	str	r2, [r7, #72]	; 0x48
 80038d0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038d2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80038d6:	e841 2300 	strex	r3, r2, [r1]
 80038da:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80038dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d1e5      	bne.n	80038ae <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	2220      	movs	r2, #32
 80038e6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2220      	movs	r2, #32
 80038ec:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	2200      	movs	r2, #0
 80038f2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e067      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 0304 	and.w	r3, r3, #4
 8003904:	2b00      	cmp	r3, #0
 8003906:	d04f      	beq.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	69db      	ldr	r3, [r3, #28]
 800390e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003912:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003916:	d147      	bne.n	80039a8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003920:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003930:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003932:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003936:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003940:	637b      	str	r3, [r7, #52]	; 0x34
 8003942:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003946:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800394e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e6      	bne.n	8003922 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	697b      	ldr	r3, [r7, #20]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	613b      	str	r3, [r7, #16]
   return(result);
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	f023 0301 	bic.w	r3, r3, #1
 800396a:	66bb      	str	r3, [r7, #104]	; 0x68
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	3308      	adds	r3, #8
 8003972:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003974:	623a      	str	r2, [r7, #32]
 8003976:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003978:	69f9      	ldr	r1, [r7, #28]
 800397a:	6a3a      	ldr	r2, [r7, #32]
 800397c:	e841 2300 	strex	r3, r2, [r1]
 8003980:	61bb      	str	r3, [r7, #24]
   return(result);
 8003982:	69bb      	ldr	r3, [r7, #24]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d1e5      	bne.n	8003954 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	2220      	movs	r2, #32
 8003992:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2220      	movs	r2, #32
 8003998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	2200      	movs	r2, #0
 80039a0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80039a4:	2303      	movs	r3, #3
 80039a6:	e010      	b.n	80039ca <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	69da      	ldr	r2, [r3, #28]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	4013      	ands	r3, r2
 80039b2:	68ba      	ldr	r2, [r7, #8]
 80039b4:	429a      	cmp	r2, r3
 80039b6:	bf0c      	ite	eq
 80039b8:	2301      	moveq	r3, #1
 80039ba:	2300      	movne	r3, #0
 80039bc:	b2db      	uxtb	r3, r3
 80039be:	461a      	mov	r2, r3
 80039c0:	79fb      	ldrb	r3, [r7, #7]
 80039c2:	429a      	cmp	r2, r3
 80039c4:	f43f af4a 	beq.w	800385c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80039c8:	2300      	movs	r3, #0
}
 80039ca:	4618      	mov	r0, r3
 80039cc:	3770      	adds	r7, #112	; 0x70
 80039ce:	46bd      	mov	sp, r7
 80039d0:	bd80      	pop	{r7, pc}

080039d2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b095      	sub	sp, #84	; 0x54
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039e2:	e853 3f00 	ldrex	r3, [r3]
 80039e6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80039e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80039ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	461a      	mov	r2, r3
 80039f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80039f8:	643b      	str	r3, [r7, #64]	; 0x40
 80039fa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039fc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039fe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a00:	e841 2300 	strex	r3, r2, [r1]
 8003a04:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d1e6      	bne.n	80039da <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	3308      	adds	r3, #8
 8003a12:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a14:	6a3b      	ldr	r3, [r7, #32]
 8003a16:	e853 3f00 	ldrex	r3, [r3]
 8003a1a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	f023 0301 	bic.w	r3, r3, #1
 8003a22:	64bb      	str	r3, [r7, #72]	; 0x48
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003a2c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a30:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003a32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003a34:	e841 2300 	strex	r3, r2, [r1]
 8003a38:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d1e5      	bne.n	8003a0c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a44:	2b01      	cmp	r3, #1
 8003a46:	d118      	bne.n	8003a7a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	e853 3f00 	ldrex	r3, [r3]
 8003a54:	60bb      	str	r3, [r7, #8]
   return(result);
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0310 	bic.w	r3, r3, #16
 8003a5c:	647b      	str	r3, [r7, #68]	; 0x44
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	461a      	mov	r2, r3
 8003a64:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a66:	61bb      	str	r3, [r7, #24]
 8003a68:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a6a:	6979      	ldr	r1, [r7, #20]
 8003a6c:	69ba      	ldr	r2, [r7, #24]
 8003a6e:	e841 2300 	strex	r3, r2, [r1]
 8003a72:	613b      	str	r3, [r7, #16]
   return(result);
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d1e6      	bne.n	8003a48 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2220      	movs	r2, #32
 8003a7e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2200      	movs	r2, #0
 8003a84:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003a8c:	bf00      	nop
 8003a8e:	3754      	adds	r7, #84	; 0x54
 8003a90:	46bd      	mov	sp, r7
 8003a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a96:	4770      	bx	lr

08003a98 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003aa4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	2200      	movs	r2, #0
 8003aaa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003ab6:	68f8      	ldr	r0, [r7, #12]
 8003ab8:	f7ff fb3c 	bl	8003134 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003abc:	bf00      	nop
 8003abe:	3710      	adds	r7, #16
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}

08003ac4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003ac4:	b580      	push	{r7, lr}
 8003ac6:	b088      	sub	sp, #32
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	e853 3f00 	ldrex	r3, [r3]
 8003ad8:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ada:	68bb      	ldr	r3, [r7, #8]
 8003adc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003ae0:	61fb      	str	r3, [r7, #28]
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	61bb      	str	r3, [r7, #24]
 8003aec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003aee:	6979      	ldr	r1, [r7, #20]
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	e841 2300 	strex	r3, r2, [r1]
 8003af6:	613b      	str	r3, [r7, #16]
   return(result);
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d1e6      	bne.n	8003acc <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2220      	movs	r2, #32
 8003b02:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003b0a:	6878      	ldr	r0, [r7, #4]
 8003b0c:	f7ff fb08 	bl	8003120 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003b10:	bf00      	nop
 8003b12:	3720      	adds	r7, #32
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b083      	sub	sp, #12
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <__libc_init_array>:
 8003b2c:	b570      	push	{r4, r5, r6, lr}
 8003b2e:	4d0d      	ldr	r5, [pc, #52]	; (8003b64 <__libc_init_array+0x38>)
 8003b30:	4c0d      	ldr	r4, [pc, #52]	; (8003b68 <__libc_init_array+0x3c>)
 8003b32:	1b64      	subs	r4, r4, r5
 8003b34:	10a4      	asrs	r4, r4, #2
 8003b36:	2600      	movs	r6, #0
 8003b38:	42a6      	cmp	r6, r4
 8003b3a:	d109      	bne.n	8003b50 <__libc_init_array+0x24>
 8003b3c:	4d0b      	ldr	r5, [pc, #44]	; (8003b6c <__libc_init_array+0x40>)
 8003b3e:	4c0c      	ldr	r4, [pc, #48]	; (8003b70 <__libc_init_array+0x44>)
 8003b40:	f000 f820 	bl	8003b84 <_init>
 8003b44:	1b64      	subs	r4, r4, r5
 8003b46:	10a4      	asrs	r4, r4, #2
 8003b48:	2600      	movs	r6, #0
 8003b4a:	42a6      	cmp	r6, r4
 8003b4c:	d105      	bne.n	8003b5a <__libc_init_array+0x2e>
 8003b4e:	bd70      	pop	{r4, r5, r6, pc}
 8003b50:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b54:	4798      	blx	r3
 8003b56:	3601      	adds	r6, #1
 8003b58:	e7ee      	b.n	8003b38 <__libc_init_array+0xc>
 8003b5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003b5e:	4798      	blx	r3
 8003b60:	3601      	adds	r6, #1
 8003b62:	e7f2      	b.n	8003b4a <__libc_init_array+0x1e>
 8003b64:	08003bec 	.word	0x08003bec
 8003b68:	08003bec 	.word	0x08003bec
 8003b6c:	08003bec 	.word	0x08003bec
 8003b70:	08003bf0 	.word	0x08003bf0

08003b74 <memset>:
 8003b74:	4402      	add	r2, r0
 8003b76:	4603      	mov	r3, r0
 8003b78:	4293      	cmp	r3, r2
 8003b7a:	d100      	bne.n	8003b7e <memset+0xa>
 8003b7c:	4770      	bx	lr
 8003b7e:	f803 1b01 	strb.w	r1, [r3], #1
 8003b82:	e7f9      	b.n	8003b78 <memset+0x4>

08003b84 <_init>:
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	bf00      	nop
 8003b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b8a:	bc08      	pop	{r3}
 8003b8c:	469e      	mov	lr, r3
 8003b8e:	4770      	bx	lr

08003b90 <_fini>:
 8003b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b92:	bf00      	nop
 8003b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b96:	bc08      	pop	{r3}
 8003b98:	469e      	mov	lr, r3
 8003b9a:	4770      	bx	lr
